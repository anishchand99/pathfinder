{"version":3,"sources":["PathFinder/Node.js","PathFinder/Navbar.js","algorithms/dijkstra.js","constants.js","PathFinder/PathFinder.js","App.js","serviceWorker.js","index.js"],"names":["Node","onMouseDown","e","node","console","log","document","querySelector","setState","isMouseDown","isMouseUp","onMouseUp","target","className","onMouseOver","state","getElementById","props","column","row","style","backgroundColor","onMouseEnter","didMouseEnter","onMouseLeave","didMouseLeave","onDragStart","dataTransfer","setData","onDragOver","preventDefault","onDrop","changeStartNode","changeEndNode","resetCSS","data","getData","didMouseMove","isDragable","this","isStart","isFinish","isWall","makeWall","extraClassName","draggable","id","Component","Navbar","getAlgorithmType","selectAlgo","value","getSpeedValue","selectSpeed","onChange","dijkstra","grid","startNode","endNode","visitedNodes","distance","unvisitedNodes","nodes","push","getAllNodes","length","currentNode","getClosestNode","neighborList","getNeighbors","Infinity","isVisited","neighbor","previousNode","sort","A","B","shift","initialState","startNodeCol","startNodeRow","endNodeCol","endNodeRow","algo","speed","wallDict","Map","i","j","set","createWallDictionary","PathFinder","algorithm","speedX","updatedWall","alreadyIsWall","get","drawInitialGrid","bool","disabled","freezeButtons","shortestPath","reverse","getShortestPath","removeCSS","animateAlgorithm","setTimeout","displayShortestPath","onClick","visualizeAlgorithm","map","rowIndex","key","coln","colnIndex","currentColumn","createNewNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf55b2c4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Node.css\";\r\n\r\nclass Node extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isMouseUp: true,\r\n      isMouseDown: false,\r\n      didMouseEnter: false,\r\n      didMouseMove: false,\r\n      didMouseLeave: false,\r\n    };\r\n  }\r\n  onMouseDown = (e, node) => {\r\n    console.log(document.querySelector(\".grid\"));\r\n    this.setState({ isMouseDown: true, isMouseUp: false });\r\n  };\r\n  onMouseUp = (e, node) => {\r\n    console.log(\"up\");\r\n    console.log(e.target.className);\r\n    this.setState({ isMouseUp: true, isMouseDown: false });\r\n  };\r\n  onMouseOver = (e, node) => {\r\n    // const [makeWall] = this.props;\r\n    if (this.state.isMouseDown === true) {\r\n      // makeWall(node);\r\n      console.log(node);\r\n      console.log(\r\n        document.getElementById(`node-${node.props.column}-${node.props.row}`)\r\n      );\r\n      document.getElementById(\r\n        `node-${node.props.column}-${node.props.row}`\r\n      ).style.backgroundColor = \"purple\";\r\n    }\r\n  };\r\n  onMouseEnter = () => {\r\n    this.setState({ didMouseEnter: true });\r\n  };\r\n  onMouseLeave = () => {\r\n    this.setState({ didMouseLeave: true, didMouseEnter: false });\r\n  };\r\n  onDragStart = (e, node) => {\r\n    e.dataTransfer.setData(\r\n      \"text\",\r\n      `node-${node.props.column}-${node.props.row}`\r\n    );\r\n  };\r\n  onDragOver = (e) => {\r\n    e.preventDefault();\r\n  };\r\n  onDrop = (e, node) => {\r\n    const { changeStartNode, changeEndNode, resetCSS } = this.props;\r\n    //id of the 'soon to be previous' startNode/endNode, current startNode/endNode that will be previous after drag n drop\r\n    let data = e.dataTransfer.getData(\"text\");\r\n    if (document.getElementById(data).className === \"nodestart\") {\r\n      document.querySelector(`.nodestart`).className = \"node\";\r\n      document.getElementById(\r\n        `node-${node.props.column}-${node.props.row}`\r\n      ).className = \"nodestart\";\r\n      changeStartNode(node);\r\n    }\r\n    if (document.getElementById(data).className === \"nodefinish\") {\r\n      document.querySelector(`.nodefinish`).className = \"node\";\r\n      document.getElementById(\r\n        `node-${node.props.column}-${node.props.row}`\r\n      ).className = \"nodefinish\";\r\n      changeEndNode(node);\r\n    }\r\n    resetCSS();\r\n  };\r\n  render() {\r\n    const { column, row, isStart, isFinish, isWall, makeWall } = this.props;\r\n    const extraClassName = isFinish\r\n      ? \"finish\"\r\n      : isStart\r\n      ? \"start\"\r\n      : isWall\r\n      ? \"wall\"\r\n      : \"\";\r\n    let isDragable;\r\n    if (isStart) {\r\n      isDragable = true;\r\n    } else if (isFinish) {\r\n      isDragable = true;\r\n    } else {\r\n      isDragable = false;\r\n    }\r\n    return (\r\n      <div\r\n        draggable={isDragable}\r\n        id={`node-${column}-${row}`}\r\n        className={`node${extraClassName}`}\r\n        onMouseDown={(e) => makeWall(this)}\r\n        onDragStart={(e) => this.onDragStart(e, this)}\r\n        onDragOver={(e) => this.onDragOver(e)}\r\n        onDrop={(e) => this.onDrop(e, this)}\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default Node;\r\n","import React, { Component } from \"react\";\r\nimport \"./Navbar.css\";\r\nclass Navbar extends Component {\r\n  constructor() {\r\n    super();\r\n  }\r\n  getAlgorithmType = () => {\r\n    const { selectAlgo } = this.props;\r\n    selectAlgo(document.getElementById(\"algorithm-type\").value);\r\n  };\r\n  getSpeedValue = () => {\r\n    const { selectSpeed } = this.props;\r\n    selectSpeed(document.getElementById(\"speed-val\").value);\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"navBar\">\r\n        <span>\r\n          Algorithms&nbsp;\r\n          <select id=\"algorithm-type\" onChange={this.getAlgorithmType}>\r\n            <option value=\"dijkstra\">Dijkstra</option>\r\n            <option value=\"breadthFirst\">Breadth First</option>\r\n            <option value=\"depthFirst\">Depth First</option>\r\n            <option value=\"aStar\">A Star</option>\r\n          </select>\r\n        </span>\r\n        <span>\r\n          Speed&nbsp;\r\n          <select id=\"speed-val\" onChange={this.getSpeedValue}>\r\n            <option value=\"500\">1X</option>\r\n            <option value=\"100\">5X</option>\r\n            <option value=\"1\">Instant</option>\r\n          </select>\r\n        </span>\r\n        <span>\r\n          <div className=\"startNode\"></div>\r\n          Start Node\r\n        </span>\r\n        <span>\r\n          <div className=\"endNode\"></div>\r\n          End Node\r\n        </span>\r\n        <span>\r\n          <div className=\"wall\"></div>\r\n          Wall\r\n        </span>\r\n\r\n        <span>\r\n          <div className=\"visitedNode\"></div>\r\n          Visited Nodes\r\n        </span>\r\n        <span>\r\n          <div className=\"unvisitedNode\"></div>\r\n          Unvisited Nodes\r\n        </span>\r\n        <span>\r\n          <div className=\"path\"></div>\r\n          Path\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Navbar;\r\n","export function dijkstra(grid, startNode, endNode) {\r\n  const visitedNodes = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (unvisitedNodes.length > 0) {\r\n    //   start at the start node and susequently get the closest neighbor\r\n    const currentNode = getClosestNode(unvisitedNodes);\r\n    const neighborList = getNeighbors(currentNode, grid);\r\n    if (currentNode.isWall) continue;\r\n    if (currentNode.distance === Infinity) return visitedNodes;\r\n    currentNode.isVisited = true;\r\n    visitedNodes.push(currentNode);\r\n    if (currentNode === endNode) return visitedNodes;\r\n    for (const neighbor of neighborList) {\r\n      let distance = currentNode.distance + 1;\r\n      if (distance < neighbor.distance) {\r\n        neighbor.distance = distance;\r\n        neighbor.previousNode = currentNode;\r\n      }\r\n    }\r\n  }\r\n}\r\nfunction getNeighbors(currentNode, grid) {\r\n  const neighborList = [];\r\n  const { column, row } = currentNode;\r\n  if (column > 0) neighborList.push(grid[column - 1][row]);\r\n  if (column < grid.length - 1) neighborList.push(grid[column + 1][row]);\r\n  if (row > 0) neighborList.push(grid[column][row - 1]);\r\n  if (row < grid[0].length - 1) neighborList.push(grid[column][row + 1]);\r\n  return neighborList;\r\n}\r\n\r\nfunction getClosestNode(unvisitedNodes) {\r\n  //arrange in ascending order by distance\r\n  unvisitedNodes.sort((A, B) => A.distance - B.distance);\r\n  //remove closestNode from unvisited nodes\r\n  const node = unvisitedNodes.shift();\r\n  return node;\r\n}\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const column of grid) {\r\n    for (const node of column) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\nexport function getShortestPath(startNode, endNode) {\r\n  let shortestPath = [];\r\n  let currentNode = endNode;\r\n  while (currentNode !== null) {\r\n    shortestPath.push(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return shortestPath.reverse();\r\n}\r\n","export const START_NODE_COL = 20;\r\nexport const START_NODE_ROW = 10;\r\nexport const END_NODE_COL = 12;\r\nexport const END_NODE_ROW = 10;\r\nexport const GRID_COLS = 50;\r\nexport const GRID_ROWS = 20;\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node.js\";\r\nimport \"./PathFinder.css\";\r\nimport Navbar from \"./Navbar\";\r\nimport { dijkstra, getShortestPath } from \"../algorithms/dijkstra\";\r\nimport {\r\n  START_NODE_COL,\r\n  START_NODE_ROW,\r\n  END_NODE_COL,\r\n  END_NODE_ROW,\r\n  GRID_COLS,\r\n  GRID_ROWS,\r\n} from \"../constants\";\r\nconst createWallDictionary = () => {\r\n  let wallDict = new Map();\r\n  for (let i = 0; i < GRID_COLS; i++) {\r\n    for (let j = 0; j < GRID_ROWS; j++) {\r\n      wallDict.set(`${i}-${j}`, false);\r\n    }\r\n  }\r\n  return wallDict;\r\n};\r\nlet wallDictionary = createWallDictionary();\r\nconst initialState = {\r\n  grid: [],\r\n  startNodeCol: START_NODE_COL,\r\n  startNodeRow: START_NODE_ROW,\r\n  endNodeCol: END_NODE_COL,\r\n  endNodeRow: END_NODE_ROW,\r\n  algo: \"dijkstra\",\r\n  speed: 500,\r\n  wallDict: wallDictionary,\r\n};\r\nclass PathFinder extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = initialState;\r\n  }\r\n  componentDidMount() {\r\n    const grid = drawInitialGrid(this.state);\r\n    this.setState({ grid: grid });\r\n  }\r\n  freezeButtons(bool) {\r\n    let startButton = document.getElementById(\"start\");\r\n    startButton.disabled = bool;\r\n    let resetButton = document.getElementById(\"reset\");\r\n    resetButton.disabled = bool;\r\n  }\r\n  selectAlgo = (algorithm) => {\r\n    this.setState({ algo: algorithm });\r\n  };\r\n  selectSpeed = (speedX) => {\r\n    this.setState({ speed: speedX });\r\n  };\r\n  visualizeAlgorithm() {\r\n    this.freezeButtons(true);\r\n    const {\r\n      grid,\r\n      startNodeCol,\r\n      startNodeRow,\r\n      endNodeCol,\r\n      endNodeRow,\r\n      algo,\r\n    } = this.state;\r\n    const startNode = grid[startNodeCol][startNodeRow];\r\n    const endNode = grid[endNodeCol][endNodeRow];\r\n    let visitedNodes = [];\r\n    if (algo === \"dijkstra\") {\r\n      visitedNodes = dijkstra(grid, startNode, endNode);\r\n    }\r\n    const shortestPath = getShortestPath(startNode, endNode);\r\n    this.removeCSS();\r\n    this.animateAlgorithm(visitedNodes, startNode, endNode, shortestPath);\r\n  }\r\n\r\n  //remove the CSS of the nodes after the first use of visualize button\r\n  removeCSS() {\r\n    while (\r\n      document.querySelector(`.node-Visited`) != null ||\r\n      document.querySelector(`.node-Path`) != null\r\n    ) {\r\n      if (document.querySelector(`.node-Visited`) != null) {\r\n        document.querySelector(`.node-Visited`).className = \"node\";\r\n      }\r\n      if (document.querySelector(`.node-Path`) != null) {\r\n        document.querySelector(`.node-Path`).className = \"node\";\r\n      }\r\n    }\r\n  }\r\n  animateAlgorithm(visitedNodes, startNode, endNode, shortestPath) {\r\n    console.log(\"animated   \", visitedNodes);\r\n    const { speed } = this.state;\r\n    for (let i = 0; i < visitedNodes.length; i++) {\r\n      if (i === visitedNodes.length - 1) {\r\n        setTimeout(() => {\r\n          this.displayShortestPath(shortestPath, startNode, endNode);\r\n        }, speed * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodes[i];\r\n        if (node !== startNode && node !== endNode) {\r\n          document.getElementById(`node-${node.column}-${node.row}`).className =\r\n            \"node-Visited\";\r\n        }\r\n      }, speed * i);\r\n    }\r\n  }\r\n  displayShortestPath(shortestPath, startNode, endNode) {\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n      const node = shortestPath[i];\r\n      if (node !== startNode && node !== endNode) {\r\n        document.getElementById(`node-${node.column}-${node.row}`).className =\r\n          \"node-Path\";\r\n      }\r\n    }\r\n    this.freezeButtons(false);\r\n  }\r\n  makeWall = (node) => {\r\n    const { startNodeCol, startNodeRow, endNodeCol, endNodeRow } = this.state;\r\n    let updatedWall = this.state.wallDict;\r\n    //check if the node is already a wall\r\n    const alreadyIsWall = this.state.wallDict.get(\r\n      `${node.props.column}-${node.props.row}`\r\n    );\r\n    //check if condition: don't make wall if it is a start node or end node\r\n    if (\r\n      !(\r\n        (node.props.row === startNodeRow &&\r\n          node.props.column === startNodeCol) ||\r\n        (node.props.row === endNodeRow && node.props.column === endNodeCol)\r\n      )\r\n    ) {\r\n      //check if condition: if already a wall, remove the wall\r\n      if (alreadyIsWall) {\r\n        updatedWall.set(`${node.props.column}-${node.props.row}`, false);\r\n      } else {\r\n        updatedWall.set(`${node.props.column}-${node.props.row}`, true);\r\n      }\r\n    }\r\n    this.setState(\r\n      {\r\n        wallDict: updatedWall,\r\n      },\r\n      () => {\r\n        const grid = drawInitialGrid(this.state);\r\n        this.setState({ grid: grid });\r\n      }\r\n    );\r\n  };\r\n  changeStartNode = (node) => {\r\n    this.setState(\r\n      {\r\n        startNodeCol: node.props.column,\r\n        startNodeRow: node.props.row,\r\n      },\r\n      () => {\r\n        const grid = drawInitialGrid(this.state);\r\n        this.setState({ grid: grid });\r\n      }\r\n    );\r\n  };\r\n  changeEndNode = (node) => {\r\n    this.setState(\r\n      {\r\n        endNodeCol: node.props.column,\r\n        endNodeRow: node.props.row,\r\n      },\r\n      () => {\r\n        const grid = drawInitialGrid(this.state);\r\n        this.setState({ grid: grid });\r\n      }\r\n    );\r\n  };\r\n\r\n  //reset the CSS animations to go to fresh grid, used in the reset button\r\n  resetCSS() {\r\n    while (\r\n      document.querySelector(`.node-Visited`) != null ||\r\n      document.querySelector(`.node-Path`) != null ||\r\n      document.querySelector(`.nodewall`) != null\r\n    ) {\r\n      if (document.querySelector(`.node-Visited`) != null) {\r\n        document.querySelector(`.node-Visited`).className = \"node\";\r\n      }\r\n      if (document.querySelector(`.node-Path`) != null) {\r\n        document.querySelector(`.node-Path`).className = \"node\";\r\n      }\r\n      if (document.querySelector(`.nodewall`) != null) {\r\n        document.querySelector(`.nodewall`).className = \"node\";\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <Navbar\r\n          selectAlgo={this.selectAlgo}\r\n          selectSpeed={this.selectSpeed}\r\n        ></Navbar>\r\n        <button id=\"start\" onClick={() => this.visualizeAlgorithm()}>\r\n          Visualize!\r\n        </button>\r\n        <button id=\"reset\" onClick={() => this.resetCSS()}>\r\n          Reset!\r\n        </button>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIndex) => {\r\n            return (\r\n              <div key={rowIndex}>\r\n                {row.map((coln, colnIndex) => {\r\n                  const { row, column, isStart, isFinish, isWall } = coln;\r\n                  return (\r\n                    <Node\r\n                      key={colnIndex}\r\n                      row={row}\r\n                      column={column}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      changeStartNode={this.changeStartNode}\r\n                      changeEndNode={this.changeEndNode}\r\n                      makeWall={this.makeWall}\r\n                      resetCSS={this.resetCSS}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst drawInitialGrid = (state) => {\r\n  const grid = [];\r\n  for (let column = 0; column < GRID_COLS; column++) {\r\n    let currentColumn = [];\r\n    for (let row = 0; row < GRID_ROWS; row++) {\r\n      currentColumn.push(createNewNode(row, column, state));\r\n    }\r\n    grid.push(currentColumn);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNewNode = (row, column, state) => {\r\n  const {\r\n    startNodeCol,\r\n    startNodeRow,\r\n    endNodeCol,\r\n    endNodeRow,\r\n    wallDict,\r\n  } = state;\r\n  return {\r\n    column,\r\n    row,\r\n    distance: Infinity,\r\n    previousNode: null,\r\n    isVisited: false,\r\n    isWall: wallDict.get(`${column}-${row}`),\r\n    isStart: column === startNodeCol && row === startNodeRow,\r\n    isFinish: column === endNodeCol && row === endNodeRow,\r\n  };\r\n};\r\n\r\nexport default PathFinder;\r\n\r\n//Try a boolean vs string dicitonary string will be the coln and row and boolean is isWall.\r\n","import React from \"react\";\nimport \"./App.css\";\nimport PathFinder from \"./PathFinder/PathFinder\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathFinder></PathFinder>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}