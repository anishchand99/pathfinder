{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anish\\\\Documents\\\\Projects\\\\pathfinding\\\\src\\\\PathFinder\\\\PathFinder.js\";\nimport React, { Component } from \"react\";\nimport Node from \"./Node.js\";\nimport \"./PathFinder.css\";\n\nclass PathFinder extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: []\n    };\n  }\n\n  componentDidMount() {\n    const grid = drawInitialGird();\n    this.setState({\n      grid: grid\n    });\n  }\n\n  visualizeAlgorithm() {\n    console.log(\"dijkstra\");\n    const grid = this.state.grid;\n  }\n\n  render() {\n    const grid = this.state.grid;\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"start\",\n      onClick: () => this.visualizeAlgorithm(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"Visualize!\"), React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, grid.map((row, rowIndex) => {\n      return React.createElement(\"div\", {\n        key: rowIndex,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, row.map((coln, colnIndex) => {\n        const row = coln.row,\n              column = coln.column,\n              isStart = coln.isStart,\n              isFinish = coln.isFinish,\n              isWall = coln.isWall;\n        return React.createElement(Node, {\n          key: colnIndex,\n          row: row,\n          column: column,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        });\n      }));\n    })));\n  }\n\n}\n\nconst drawInitialGird = () => {\n  const grid = [];\n\n  for (let column = 0; column < 50; column++) {\n    let currentColumn = [];\n\n    for (let row = 0; row < 20; row++) {\n      currentColumn.push(createNewNode(row, column));\n    }\n\n    grid.push(currentColumn);\n  }\n\n  return grid;\n};\n\nconst createNewNode = (row, column) => {\n  return {\n    column,\n    row,\n    isStart: column === 0 && row === 5,\n    isFinish: column === 40 && row === 10,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nexport default PathFinder;","map":{"version":3,"sources":["C:/Users/Anish/Documents/Projects/pathfinding/src/PathFinder/PathFinder.js"],"names":["React","Component","Node","PathFinder","constructor","state","grid","componentDidMount","drawInitialGird","setState","visualizeAlgorithm","console","log","render","map","row","rowIndex","coln","colnIndex","column","isStart","isFinish","isWall","currentColumn","push","createNewNode","distance","Infinity","isVisited","previousNode"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Node from \"./Node.js\";\r\nimport \"./PathFinder.css\";\r\n\r\nclass PathFinder extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: []\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    const grid = drawInitialGird();\r\n    this.setState({ grid: grid });\r\n  }\r\n  visualizeAlgorithm() {\r\n    console.log(\"dijkstra\");\r\n    const grid = this.state.grid;\r\n  }\r\n\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <button id=\"start\" onClick={() => this.visualizeAlgorithm()}>\r\n          Visualize!\r\n        </button>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIndex) => {\r\n            return (\r\n              <div key={rowIndex}>\r\n                {row.map((coln, colnIndex) => {\r\n                  const { row, column, isStart, isFinish, isWall } = coln;\r\n                  return (\r\n                    <Node\r\n                      key={colnIndex}\r\n                      row={row}\r\n                      column={column}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst drawInitialGird = () => {\r\n  const grid = [];\r\n  for (let column = 0; column < 50; column++) {\r\n    let currentColumn = [];\r\n    for (let row = 0; row < 20; row++) {\r\n      currentColumn.push(createNewNode(row, column));\r\n    }\r\n    grid.push(currentColumn);\r\n  }\r\n  return grid;\r\n};\r\nconst createNewNode = (row, column) => {\r\n  return {\r\n    column,\r\n    row,\r\n    isStart: column === 0 && row === 5,\r\n    isFinish: column === 40 && row === 10,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null\r\n  };\r\n};\r\n\r\nexport default PathFinder;\r\n"]},"metadata":{},"sourceType":"module"}