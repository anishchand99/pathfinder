{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anish\\\\Documents\\\\Projects\\\\pathfinding\\\\src\\\\PathFinder\\\\PathFinder.js\";\nimport React, { Component } from \"react\";\nimport Node from \"./Node.js\";\nimport \"./PathFinder.css\";\nimport { dijkstra, getShortestPath } from \"../algorithms/dijkstra\";\nimport { START_NODE_COL, START_NODE_ROW, END_NODE_COL, END_NODE_ROW } from \"../constants\";\n\nclass PathFinder extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: []\n    };\n  }\n\n  componentDidMount() {\n    const grid = drawInitialGird();\n    this.setState({\n      grid: grid\n    });\n  }\n\n  visualizeAlgorithm() {\n    const grid = this.state.grid;\n    const startNode = grid[START_NODE_COL][START_NODE_ROW];\n    const endNode = grid[END_NODE_COL][END_NODE_ROW];\n    const visitedNodes = dijkstra(grid, startNode, endNode);\n    const shortestPath = getShortestPath(startNode, endNode);\n    this.animateAlgorithm(visitedNodes, startNode, endNode, shortestPath);\n  }\n\n  animateAlgorithm(visitedNodes, startNode, endNode, shortestPath) {\n    for (let i = 0; i < visitedNodes.length; i++) {\n      if (i === visitedNodes.length - 1) {\n        setTimeout(() => {\n          this.displayShortestPath(shortestPath, startNode, endNode);\n        }, 100 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodes[i];\n\n        if (node !== startNode && node !== endNode) {\n          document.getElementById(\"node-\".concat(node.column, \"-\").concat(node.row)).className = \"node-Visited\";\n        }\n      }, 100 * i);\n    }\n  }\n\n  displayShortestPath(shortestPath, startNode, endNode) {\n    for (let i = 0; i < shortestPath.length; i++) {\n      const node = shortestPath[i];\n\n      if (node !== startNode && node !== endNode) {\n        document.getElementById(\"node-\".concat(node.column, \"-\").concat(node.row)).className = \"node-Path\";\n      }\n    }\n  }\n\n  render() {\n    const grid = this.state.grid;\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"start\",\n      onClick: () => this.visualizeAlgorithm(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Visualize!\"), React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, grid.map((row, rowIndex) => {\n      return React.createElement(\"div\", {\n        key: rowIndex,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, row.map((coln, colnIndex) => {\n        const row = coln.row,\n              column = coln.column,\n              isStart = coln.isStart,\n              isFinish = coln.isFinish,\n              isWall = coln.isWall;\n        return React.createElement(Node, {\n          key: colnIndex,\n          row: row,\n          column: column,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        });\n      }));\n    })));\n  }\n\n}\n\nconst drawInitialGird = () => {\n  const grid = [];\n\n  for (let column = 0; column < 50; column++) {\n    let currentColumn = [];\n\n    for (let row = 0; row < 20; row++) {\n      currentColumn.push(createNewNode(row, column));\n    }\n\n    grid.push(currentColumn);\n  }\n\n  return grid;\n};\n\nconst createNewNode = (row, column) => {\n  return {\n    column,\n    row,\n    distance: Infinity,\n    previousNode: null,\n    isVisited: false,\n    isWall: false,\n    isStart: column === START_NODE_COL && row === START_NODE_ROW,\n    isFinish: column === END_NODE_COL && row === END_NODE_ROW\n  };\n};\n\nexport default PathFinder;","map":{"version":3,"sources":["C:/Users/Anish/Documents/Projects/pathfinding/src/PathFinder/PathFinder.js"],"names":["React","Component","Node","dijkstra","getShortestPath","START_NODE_COL","START_NODE_ROW","END_NODE_COL","END_NODE_ROW","PathFinder","constructor","state","grid","componentDidMount","drawInitialGird","setState","visualizeAlgorithm","startNode","endNode","visitedNodes","shortestPath","animateAlgorithm","i","length","setTimeout","displayShortestPath","node","document","getElementById","column","row","className","render","map","rowIndex","coln","colnIndex","isStart","isFinish","isWall","currentColumn","push","createNewNode","distance","Infinity","previousNode","isVisited"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Node from \"./Node.js\";\r\nimport \"./PathFinder.css\";\r\nimport { dijkstra, getShortestPath } from \"../algorithms/dijkstra\";\r\nimport {\r\n  START_NODE_COL,\r\n  START_NODE_ROW,\r\n  END_NODE_COL,\r\n  END_NODE_ROW\r\n} from \"../constants\";\r\n\r\nclass PathFinder extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: []\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    const grid = drawInitialGird();\r\n    this.setState({ grid: grid });\r\n  }\r\n  visualizeAlgorithm() {\r\n    const grid = this.state.grid;\r\n    const startNode = grid[START_NODE_COL][START_NODE_ROW];\r\n    const endNode = grid[END_NODE_COL][END_NODE_ROW];\r\n    const visitedNodes = dijkstra(grid, startNode, endNode);\r\n    const shortestPath = getShortestPath(startNode, endNode);\r\n    this.animateAlgorithm(visitedNodes, startNode, endNode, shortestPath);\r\n  }\r\n  animateAlgorithm(visitedNodes, startNode, endNode, shortestPath) {\r\n    for (let i = 0; i < visitedNodes.length; i++) {\r\n      if (i === visitedNodes.length - 1) {\r\n        setTimeout(() => {\r\n          this.displayShortestPath(shortestPath, startNode, endNode);\r\n        }, 100 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodes[i];\r\n        if (node !== startNode && node !== endNode) {\r\n          document.getElementById(`node-${node.column}-${node.row}`).className =\r\n            \"node-Visited\";\r\n        }\r\n      }, 100 * i);\r\n    }\r\n  }\r\n\r\n  displayShortestPath(shortestPath, startNode, endNode) {\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n      const node = shortestPath[i];\r\n      if (node !== startNode && node !== endNode) {\r\n        document.getElementById(`node-${node.column}-${node.row}`).className =\r\n          \"node-Path\";\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <button id=\"start\" onClick={() => this.visualizeAlgorithm()}>\r\n          Visualize!\r\n        </button>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIndex) => {\r\n            return (\r\n              <div key={rowIndex}>\r\n                {row.map((coln, colnIndex) => {\r\n                  const { row, column, isStart, isFinish, isWall } = coln;\r\n                  return (\r\n                    <Node\r\n                      key={colnIndex}\r\n                      row={row}\r\n                      column={column}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst drawInitialGird = () => {\r\n  const grid = [];\r\n  for (let column = 0; column < 50; column++) {\r\n    let currentColumn = [];\r\n    for (let row = 0; row < 20; row++) {\r\n      currentColumn.push(createNewNode(row, column));\r\n    }\r\n    grid.push(currentColumn);\r\n  }\r\n  return grid;\r\n};\r\nconst createNewNode = (row, column) => {\r\n  return {\r\n    column,\r\n    row,\r\n    distance: Infinity,\r\n    previousNode: null,\r\n    isVisited: false,\r\n    isWall: false,\r\n    isStart: column === START_NODE_COL && row === START_NODE_ROW,\r\n    isFinish: column === END_NODE_COL && row === END_NODE_ROW\r\n  };\r\n};\r\n\r\nexport default PathFinder;\r\n"]},"metadata":{},"sourceType":"module"}