{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anish\\\\Documents\\\\Projects\\\\pathfinding\\\\src\\\\PathFinder\\\\PathFinder.js\";\nimport React, { Component } from \"react\";\nimport Node from \"./Node.js\";\nimport \"./PathFinder.css\";\nimport { dijkstra, getShortestPath } from \"../algorithms/dijkstra\";\nimport { START_NODE_COL, START_NODE_ROW, END_NODE_COL, END_NODE_ROW } from \"../constants\";\nconst freeze = true;\nconst initialState = {\n  grid: [],\n  startNodeCol: START_NODE_COL,\n  startNodeRow: START_NODE_ROW,\n  endNodeCol: END_NODE_COL,\n  endNodeRow: END_NODE_ROW\n};\n\nclass PathFinder extends Component {\n  constructor() {\n    super();\n\n    this.changeStartNode = () => {\n      console.log(\"change start\");\n      this.setState(props => (({\n        startNodeCol: props.column,\n        startNodeRow: props.row\n      }), console.log(props)));\n      const grid = drawInitialGrid(this.state);\n      this.setState({\n        grid: grid\n      });\n    };\n\n    this.changeEndNode = () => {\n      this.setState(props => ({\n        endNodeCol: props.column,\n        endNodeRow: props.row\n      }));\n      const grid = drawInitialGrid(this.state);\n      this.setState({\n        grid: grid\n      });\n    };\n\n    this.state = initialState;\n  }\n\n  componentDidMount() {\n    const grid = drawInitialGrid(this.state);\n    this.setState({\n      grid: grid\n    });\n  }\n\n  visualizeAlgorithm() {\n    const _this$state = this.state,\n          grid = _this$state.grid,\n          startNodeCol = _this$state.startNodeCol,\n          startNodeRow = _this$state.startNodeRow,\n          endNodeCol = _this$state.endNodeCol,\n          endNodeRow = _this$state.endNodeRow;\n    const startNode = grid[startNodeCol][startNodeRow];\n    const endNode = grid[endNodeCol][endNodeRow];\n    const visitedNodes = dijkstra(grid, startNode, endNode);\n    const shortestPath = getShortestPath(startNode, endNode);\n    this.removeCSS(visitedNodes, startNode, endNode);\n    this.animateAlgorithm(visitedNodes, startNode, endNode, shortestPath);\n  } //remove the CSS of the nodes after the first use of visualize button\n\n\n  removeCSS(visitedNodes, startNode, endNode) {\n    for (let i = 0; i < visitedNodes.length; i++) {\n      const node = visitedNodes[i];\n\n      if (node !== startNode && node !== endNode) {\n        document.getElementById(\"node-\".concat(node.column, \"-\").concat(node.row)).className = \"node\";\n      }\n    }\n  }\n\n  animateAlgorithm(visitedNodes, startNode, endNode, shortestPath) {\n    for (let i = 0; i < visitedNodes.length; i++) {\n      if (i === visitedNodes.length - 1) {\n        setTimeout(() => {\n          this.displayShortestPath(shortestPath, startNode, endNode);\n        }, 100 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodes[i];\n\n        if (node !== startNode && node !== endNode) {\n          document.getElementById(\"node-\".concat(node.column, \"-\").concat(node.row)).className = \"node-Visited\";\n        }\n      }, 100 * i);\n    }\n  }\n\n  displayShortestPath(shortestPath, startNode, endNode) {\n    for (let i = 0; i < shortestPath.length; i++) {\n      const node = shortestPath[i];\n\n      if (node !== startNode && node !== endNode) {\n        document.getElementById(\"node-\".concat(node.column, \"-\").concat(node.row)).className = \"node-Path\";\n      }\n    }\n  }\n\n  //reset the CSS animation after the first use\n  resetCSS() {\n    while (document.querySelector(\".node-Visited\") != null) {\n      document.querySelector(\".node-Visited\").className = \"node\";\n    }\n\n    while (document.querySelector(\".node-Path\") != null) {\n      document.querySelector(\".node-Path\").className = \"node\";\n    }\n  }\n\n  render() {\n    const grid = this.state.grid;\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"start\",\n      onClick: () => this.visualizeAlgorithm(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Visualize!\"), React.createElement(\"button\", {\n      id: \"reset\",\n      onClick: () => this.resetCSS(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Reset!\"), React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, grid.map((row, rowIndex) => {\n      return React.createElement(\"div\", {\n        key: rowIndex,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, row.map((coln, colnIndex) => {\n        const row = coln.row,\n              column = coln.column,\n              isStart = coln.isStart,\n              isFinish = coln.isFinish,\n              isWall = coln.isWall;\n        return React.createElement(Node, {\n          key: colnIndex,\n          row: row,\n          column: column,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          changeStartNode: this.changeStartNode,\n          changeEndNode: this.changeEndNode,\n          resetCSS: this.resetCSS,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        });\n      }));\n    })));\n  }\n\n}\n\nconst drawInitialGrid = state => {\n  const grid = [];\n\n  for (let column = 0; column < 50; column++) {\n    let currentColumn = [];\n\n    for (let row = 0; row < 20; row++) {\n      currentColumn.push(createNewNode(row, column, state));\n    }\n\n    grid.push(currentColumn);\n  }\n\n  return grid;\n};\n\nconst createNewNode = (row, column, state) => {\n  const startNodeCol = state.startNodeCol,\n        startNodeRow = state.startNodeRow,\n        endNodeCol = state.endNodeCol,\n        endNodeRow = state.endNodeRow;\n  return {\n    column,\n    row,\n    distance: Infinity,\n    previousNode: null,\n    isVisited: false,\n    isWall: false,\n    isStart: column === startNodeCol && row === startNodeRow,\n    isFinish: column === endNodeCol && row === endNodeRow\n  };\n};\n\nexport default PathFinder;","map":{"version":3,"sources":["C:/Users/Anish/Documents/Projects/pathfinding/src/PathFinder/PathFinder.js"],"names":["React","Component","Node","dijkstra","getShortestPath","START_NODE_COL","START_NODE_ROW","END_NODE_COL","END_NODE_ROW","freeze","initialState","grid","startNodeCol","startNodeRow","endNodeCol","endNodeRow","PathFinder","constructor","changeStartNode","console","log","setState","props","column","row","drawInitialGrid","state","changeEndNode","componentDidMount","visualizeAlgorithm","startNode","endNode","visitedNodes","shortestPath","removeCSS","animateAlgorithm","i","length","node","document","getElementById","className","setTimeout","displayShortestPath","resetCSS","querySelector","render","map","rowIndex","coln","colnIndex","isStart","isFinish","isWall","currentColumn","push","createNewNode","distance","Infinity","previousNode","isVisited"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Node from \"./Node.js\";\r\nimport \"./PathFinder.css\";\r\nimport { dijkstra, getShortestPath } from \"../algorithms/dijkstra\";\r\nimport {\r\n  START_NODE_COL,\r\n  START_NODE_ROW,\r\n  END_NODE_COL,\r\n  END_NODE_ROW,\r\n} from \"../constants\";\r\n\r\nconst freeze = true;\r\nconst initialState = {\r\n  grid: [],\r\n  startNodeCol: START_NODE_COL,\r\n  startNodeRow: START_NODE_ROW,\r\n  endNodeCol: END_NODE_COL,\r\n  endNodeRow: END_NODE_ROW,\r\n};\r\nclass PathFinder extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = initialState;\r\n  }\r\n  componentDidMount() {\r\n    const grid = drawInitialGrid(this.state);\r\n    this.setState({ grid: grid });\r\n  }\r\n  visualizeAlgorithm() {\r\n    const {\r\n      grid,\r\n      startNodeCol,\r\n      startNodeRow,\r\n      endNodeCol,\r\n      endNodeRow,\r\n    } = this.state;\r\n    const startNode = grid[startNodeCol][startNodeRow];\r\n    const endNode = grid[endNodeCol][endNodeRow];\r\n    const visitedNodes = dijkstra(grid, startNode, endNode);\r\n    const shortestPath = getShortestPath(startNode, endNode);\r\n    this.removeCSS(visitedNodes, startNode, endNode);\r\n    this.animateAlgorithm(visitedNodes, startNode, endNode, shortestPath);\r\n  }\r\n\r\n  //remove the CSS of the nodes after the first use of visualize button\r\n  removeCSS(visitedNodes, startNode, endNode) {\r\n    for (let i = 0; i < visitedNodes.length; i++) {\r\n      const node = visitedNodes[i];\r\n      if (node !== startNode && node !== endNode) {\r\n        document.getElementById(`node-${node.column}-${node.row}`).className =\r\n          \"node\";\r\n      }\r\n    }\r\n  }\r\n  animateAlgorithm(visitedNodes, startNode, endNode, shortestPath) {\r\n    for (let i = 0; i < visitedNodes.length; i++) {\r\n      if (i === visitedNodes.length - 1) {\r\n        setTimeout(() => {\r\n          this.displayShortestPath(shortestPath, startNode, endNode);\r\n        }, 100 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodes[i];\r\n        if (node !== startNode && node !== endNode) {\r\n          document.getElementById(`node-${node.column}-${node.row}`).className =\r\n            \"node-Visited\";\r\n        }\r\n      }, 100 * i);\r\n    }\r\n  }\r\n  displayShortestPath(shortestPath, startNode, endNode) {\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n      const node = shortestPath[i];\r\n      if (node !== startNode && node !== endNode) {\r\n        document.getElementById(`node-${node.column}-${node.row}`).className =\r\n          \"node-Path\";\r\n      }\r\n    }\r\n  }\r\n  changeStartNode = () => {\r\n    console.log(\"change start\");\r\n    this.setState(\r\n      (props) => (\r\n        {\r\n          startNodeCol: props.column,\r\n          startNodeRow: props.row,\r\n        },\r\n        console.log(props)\r\n      )\r\n    );\r\n    const grid = drawInitialGrid(this.state);\r\n    this.setState({ grid: grid });\r\n  };\r\n  changeEndNode = () => {\r\n    this.setState((props) => ({\r\n      endNodeCol: props.column,\r\n      endNodeRow: props.row,\r\n    }));\r\n    const grid = drawInitialGrid(this.state);\r\n    this.setState({ grid: grid });\r\n  };\r\n\r\n  //reset the CSS animation after the first use\r\n  resetCSS() {\r\n    while (document.querySelector(`.node-Visited`) != null) {\r\n      document.querySelector(`.node-Visited`).className = \"node\";\r\n    }\r\n    while (document.querySelector(`.node-Path`) != null) {\r\n      document.querySelector(`.node-Path`).className = \"node\";\r\n    }\r\n  }\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <button id=\"start\" onClick={() => this.visualizeAlgorithm()}>\r\n          Visualize!\r\n        </button>\r\n        <button id=\"reset\" onClick={() => this.resetCSS()}>\r\n          Reset!\r\n        </button>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIndex) => {\r\n            return (\r\n              <div key={rowIndex}>\r\n                {row.map((coln, colnIndex) => {\r\n                  const { row, column, isStart, isFinish, isWall } = coln;\r\n                  return (\r\n                    <Node\r\n                      key={colnIndex}\r\n                      row={row}\r\n                      column={column}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      changeStartNode={this.changeStartNode}\r\n                      changeEndNode={this.changeEndNode}\r\n                      resetCSS={this.resetCSS}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst drawInitialGrid = (state) => {\r\n  const grid = [];\r\n  for (let column = 0; column < 50; column++) {\r\n    let currentColumn = [];\r\n    for (let row = 0; row < 20; row++) {\r\n      currentColumn.push(createNewNode(row, column, state));\r\n    }\r\n    grid.push(currentColumn);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNewNode = (row, column, state) => {\r\n  const { startNodeCol, startNodeRow, endNodeCol, endNodeRow } = state;\r\n  return {\r\n    column,\r\n    row,\r\n    distance: Infinity,\r\n    previousNode: null,\r\n    isVisited: false,\r\n    isWall: false,\r\n    isStart: column === startNodeCol && row === startNodeRow,\r\n    isFinish: column === endNodeCol && row === endNodeRow,\r\n  };\r\n};\r\n\r\nexport default PathFinder;\r\n"]},"metadata":{},"sourceType":"module"}