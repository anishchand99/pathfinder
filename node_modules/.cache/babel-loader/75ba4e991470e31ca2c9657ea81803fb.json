{"ast":null,"code":"export function bfs(grid, startNode, endNode) {\n  const visitedNodes = [];\n  const unvisitedNodes = getAllNodes(grid);\n  let queue = [startNode];\n  let currentNode;\n\n  while (queue.length !== 0) {\n    console.log(visitedNodes);\n    currentNode = queue.shift();\n\n    if (!visitedNodes.includes(currentNode)) {\n      visitedNodes.push(currentNode);\n    }\n\n    if (currentNode === endNode) return visitedNodes;\n    const neighborList = getNeighbors(currentNode, grid);\n\n    for (const node of neighborList) {\n      if (!visitedNodes.includes(node)) {\n        queue.push(node);\n      }\n    }\n  }\n}\n\nfunction getNeighbors(currentNode, grid) {\n  const neighborList = [];\n  const column = currentNode.column,\n        row = currentNode.row;\n  if (column > 0) neighborList.push(grid[column - 1][row]);\n  if (column < grid.length - 1) neighborList.push(grid[column + 1][row]);\n  if (row > 0) neighborList.push(grid[column][row - 1]);\n  if (row < grid[0].length - 1) neighborList.push(grid[column][row + 1]);\n  return neighborList;\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const column of grid) {\n    for (const node of column) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}\n\nexport function getShortestPathBfs(startNode, endNode) {\n  let shortestPath = [];\n  let currentNode = endNode;\n\n  while (currentNode !== null) {\n    shortestPath.push(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return shortestPath.reverse();\n}","map":{"version":3,"sources":["C:/Users/Anish/Documents/PROJECTS/pathfinding/pathfinder/src/algorithms/bfs.js"],"names":["bfs","grid","startNode","endNode","visitedNodes","unvisitedNodes","getAllNodes","queue","currentNode","length","console","log","shift","includes","push","neighborList","getNeighbors","node","column","row","nodes","getShortestPathBfs","shortestPath","previousNode","reverse"],"mappings":"AAAA,OAAO,SAASA,GAAT,CAAaC,IAAb,EAAmBC,SAAnB,EAA8BC,OAA9B,EAAuC;AAC5C,QAAMC,YAAY,GAAG,EAArB;AACA,QAAMC,cAAc,GAAGC,WAAW,CAACL,IAAD,CAAlC;AACA,MAAIM,KAAK,GAAG,CAACL,SAAD,CAAZ;AACA,MAAIM,WAAJ;;AACA,SAAOD,KAAK,CAACE,MAAN,KAAiB,CAAxB,EAA2B;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAYP,YAAZ;AACAI,IAAAA,WAAW,GAAGD,KAAK,CAACK,KAAN,EAAd;;AACA,QAAI,CAACR,YAAY,CAACS,QAAb,CAAsBL,WAAtB,CAAL,EAAyC;AACvCJ,MAAAA,YAAY,CAACU,IAAb,CAAkBN,WAAlB;AACD;;AACD,QAAIA,WAAW,KAAKL,OAApB,EAA6B,OAAOC,YAAP;AAC7B,UAAMW,YAAY,GAAGC,YAAY,CAACR,WAAD,EAAcP,IAAd,CAAjC;;AACA,SAAK,MAAMgB,IAAX,IAAmBF,YAAnB,EAAiC;AAC/B,UAAI,CAACX,YAAY,CAACS,QAAb,CAAsBI,IAAtB,CAAL,EAAkC;AAChCV,QAAAA,KAAK,CAACO,IAAN,CAAWG,IAAX;AACD;AACF;AACF;AACF;;AAED,SAASD,YAAT,CAAsBR,WAAtB,EAAmCP,IAAnC,EAAyC;AACvC,QAAMc,YAAY,GAAG,EAArB;AADuC,QAE/BG,MAF+B,GAEfV,WAFe,CAE/BU,MAF+B;AAAA,QAEvBC,GAFuB,GAEfX,WAFe,CAEvBW,GAFuB;AAGvC,MAAID,MAAM,GAAG,CAAb,EAAgBH,YAAY,CAACD,IAAb,CAAkBb,IAAI,CAACiB,MAAM,GAAG,CAAV,CAAJ,CAAiBC,GAAjB,CAAlB;AAChB,MAAID,MAAM,GAAGjB,IAAI,CAACQ,MAAL,GAAc,CAA3B,EAA8BM,YAAY,CAACD,IAAb,CAAkBb,IAAI,CAACiB,MAAM,GAAG,CAAV,CAAJ,CAAiBC,GAAjB,CAAlB;AAC9B,MAAIA,GAAG,GAAG,CAAV,EAAaJ,YAAY,CAACD,IAAb,CAAkBb,IAAI,CAACiB,MAAD,CAAJ,CAAaC,GAAG,GAAG,CAAnB,CAAlB;AACb,MAAIA,GAAG,GAAGlB,IAAI,CAAC,CAAD,CAAJ,CAAQQ,MAAR,GAAiB,CAA3B,EAA8BM,YAAY,CAACD,IAAb,CAAkBb,IAAI,CAACiB,MAAD,CAAJ,CAAaC,GAAG,GAAG,CAAnB,CAAlB;AAC9B,SAAOJ,YAAP;AACD;;AAED,SAAST,WAAT,CAAqBL,IAArB,EAA2B;AACzB,QAAMmB,KAAK,GAAG,EAAd;;AACA,OAAK,MAAMF,MAAX,IAAqBjB,IAArB,EAA2B;AACzB,SAAK,MAAMgB,IAAX,IAAmBC,MAAnB,EAA2B;AACzBE,MAAAA,KAAK,CAACN,IAAN,CAAWG,IAAX;AACD;AACF;;AACD,SAAOG,KAAP;AACD;;AAED,OAAO,SAASC,kBAAT,CAA4BnB,SAA5B,EAAuCC,OAAvC,EAAgD;AACrD,MAAImB,YAAY,GAAG,EAAnB;AACA,MAAId,WAAW,GAAGL,OAAlB;;AACA,SAAOK,WAAW,KAAK,IAAvB,EAA6B;AAC3Bc,IAAAA,YAAY,CAACR,IAAb,CAAkBN,WAAlB;AACAA,IAAAA,WAAW,GAAGA,WAAW,CAACe,YAA1B;AACD;;AACD,SAAOD,YAAY,CAACE,OAAb,EAAP;AACD","sourcesContent":["export function bfs(grid, startNode, endNode) {\r\n  const visitedNodes = [];\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  let queue = [startNode];\r\n  let currentNode;\r\n  while (queue.length !== 0) {\r\n    console.log(visitedNodes);\r\n    currentNode = queue.shift();\r\n    if (!visitedNodes.includes(currentNode)) {\r\n      visitedNodes.push(currentNode);\r\n    }\r\n    if (currentNode === endNode) return visitedNodes;\r\n    const neighborList = getNeighbors(currentNode, grid);\r\n    for (const node of neighborList) {\r\n      if (!visitedNodes.includes(node)) {\r\n        queue.push(node);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNeighbors(currentNode, grid) {\r\n  const neighborList = [];\r\n  const { column, row } = currentNode;\r\n  if (column > 0) neighborList.push(grid[column - 1][row]);\r\n  if (column < grid.length - 1) neighborList.push(grid[column + 1][row]);\r\n  if (row > 0) neighborList.push(grid[column][row - 1]);\r\n  if (row < grid[0].length - 1) neighborList.push(grid[column][row + 1]);\r\n  return neighborList;\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const column of grid) {\r\n    for (const node of column) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nexport function getShortestPathBfs(startNode, endNode) {\r\n  let shortestPath = [];\r\n  let currentNode = endNode;\r\n  while (currentNode !== null) {\r\n    shortestPath.push(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return shortestPath.reverse();\r\n}\r\n"]},"metadata":{},"sourceType":"module"}