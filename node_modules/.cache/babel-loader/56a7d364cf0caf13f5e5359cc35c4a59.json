{"ast":null,"code":"export function dijkstra(grid, startNode, endNode) {\n  const visitedNodes = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (unvisitedNodes.length > 0) {\n    //   get the closest neighbor\n    const closestNeighbor = getClosestNode(unvisitedNodes);\n    closestNeighbor.isVisited = true;\n  }\n}\n\nfunction getClosestNode(unvisitedNodes) {\n  //arrange in ascending order by distance\n  unvisitedNodes.sort((A, B) => A.distance - B.distance); //remove closestNode from unvisited nodes\n\n  const node = unvisitedNodes.shift();\n  return node;\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const column of grid) {\n    for (const node of column) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}","map":{"version":3,"sources":["C:/Users/Anish/Documents/Projects/pathfinding/src/algorithms/dijkstra.js"],"names":["dijkstra","grid","startNode","endNode","visitedNodes","distance","unvisitedNodes","getAllNodes","length","closestNeighbor","getClosestNode","isVisited","sort","A","B","node","shift","nodes","column","push"],"mappings":"AAAA,OAAO,SAASA,QAAT,CAAkBC,IAAlB,EAAwBC,SAAxB,EAAmCC,OAAnC,EAA4C;AACjD,QAAMC,YAAY,GAAG,EAArB;AACAF,EAAAA,SAAS,CAACG,QAAV,GAAqB,CAArB;AACA,QAAMC,cAAc,GAAGC,WAAW,CAACN,IAAD,CAAlC;;AACA,SAAOK,cAAc,CAACE,MAAf,GAAwB,CAA/B,EAAkC;AAChC;AACA,UAAMC,eAAe,GAAGC,cAAc,CAACJ,cAAD,CAAtC;AAEAG,IAAAA,eAAe,CAACE,SAAhB,GAA4B,IAA5B;AACD;AACF;;AACD,SAASD,cAAT,CAAwBJ,cAAxB,EAAwC;AACtC;AACAA,EAAAA,cAAc,CAACM,IAAf,CAAoB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACR,QAAF,GAAaS,CAAC,CAACT,QAA7C,EAFsC,CAGtC;;AACA,QAAMU,IAAI,GAAGT,cAAc,CAACU,KAAf,EAAb;AACA,SAAOD,IAAP;AACD;;AACD,SAASR,WAAT,CAAqBN,IAArB,EAA2B;AACzB,QAAMgB,KAAK,GAAG,EAAd;;AACA,OAAK,MAAMC,MAAX,IAAqBjB,IAArB,EAA2B;AACzB,SAAK,MAAMc,IAAX,IAAmBG,MAAnB,EAA2B;AACzBD,MAAAA,KAAK,CAACE,IAAN,CAAWJ,IAAX;AACD;AACF;;AACD,SAAOE,KAAP;AACD","sourcesContent":["export function dijkstra(grid, startNode, endNode) {\r\n  const visitedNodes = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (unvisitedNodes.length > 0) {\r\n    //   get the closest neighbor\r\n    const closestNeighbor = getClosestNode(unvisitedNodes);\r\n\r\n    closestNeighbor.isVisited = true;\r\n  }\r\n}\r\nfunction getClosestNode(unvisitedNodes) {\r\n  //arrange in ascending order by distance\r\n  unvisitedNodes.sort((A, B) => A.distance - B.distance);\r\n  //remove closestNode from unvisited nodes\r\n  const node = unvisitedNodes.shift();\r\n  return node;\r\n}\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const column of grid) {\r\n    for (const node of column) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}