{"ast":null,"code":"export function bfs(grid, startNode, endNode) {\n  const visitedNodes = [];\n  const unvisitedNodes = getAllNodes(grid);\n  let queue = [startNode];\n  let currentNode;\n\n  while (queue.length !== 0) {\n    currentNode = queue.shift();\n    const neighborList = getNeighbors(currentNode, grid);\n    console.log(neighborList);\n\n    for (const node in neighborList) {\n      queue.push(node);\n      console.log(queue);\n    }\n\n    queue.push();\n    visitedNodes.push(currentNode);\n  }\n}\n\nfunction getNeighbors(currentNode, grid) {\n  const neighborList = [];\n  const column = currentNode.column,\n        row = currentNode.row;\n  if (column > 0) neighborList.push(grid[column - 1][row]);\n  if (column < grid.length - 1) neighborList.push(grid[column + 1][row]);\n  if (row > 0) neighborList.push(grid[column][row - 1]);\n  if (row < grid[0].length - 1) neighborList.push(grid[column][row + 1]);\n  return neighborList;\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const column of grid) {\n    for (const node of column) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}","map":{"version":3,"sources":["C:/Users/Anish/Documents/PROJECTS/pathfinding/pathfinder/src/algorithms/bfs.js"],"names":["bfs","grid","startNode","endNode","visitedNodes","unvisitedNodes","getAllNodes","queue","currentNode","length","shift","neighborList","getNeighbors","console","log","node","push","column","row","nodes"],"mappings":"AAAA,OAAO,SAASA,GAAT,CAAaC,IAAb,EAAmBC,SAAnB,EAA8BC,OAA9B,EAAuC;AAC5C,QAAMC,YAAY,GAAG,EAArB;AACA,QAAMC,cAAc,GAAGC,WAAW,CAACL,IAAD,CAAlC;AACA,MAAIM,KAAK,GAAG,CAACL,SAAD,CAAZ;AACA,MAAIM,WAAJ;;AACA,SAAOD,KAAK,CAACE,MAAN,KAAiB,CAAxB,EAA2B;AACzBD,IAAAA,WAAW,GAAGD,KAAK,CAACG,KAAN,EAAd;AACA,UAAMC,YAAY,GAAGC,YAAY,CAACJ,WAAD,EAAcP,IAAd,CAAjC;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;;AACA,SAAK,MAAMI,IAAX,IAAmBJ,YAAnB,EAAiC;AAC/BJ,MAAAA,KAAK,CAACS,IAAN,CAAWD,IAAX;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACD;;AACDA,IAAAA,KAAK,CAACS,IAAN;AACAZ,IAAAA,YAAY,CAACY,IAAb,CAAkBR,WAAlB;AACD;AACF;;AAED,SAASI,YAAT,CAAsBJ,WAAtB,EAAmCP,IAAnC,EAAyC;AACvC,QAAMU,YAAY,GAAG,EAArB;AADuC,QAE/BM,MAF+B,GAEfT,WAFe,CAE/BS,MAF+B;AAAA,QAEvBC,GAFuB,GAEfV,WAFe,CAEvBU,GAFuB;AAGvC,MAAID,MAAM,GAAG,CAAb,EAAgBN,YAAY,CAACK,IAAb,CAAkBf,IAAI,CAACgB,MAAM,GAAG,CAAV,CAAJ,CAAiBC,GAAjB,CAAlB;AAChB,MAAID,MAAM,GAAGhB,IAAI,CAACQ,MAAL,GAAc,CAA3B,EAA8BE,YAAY,CAACK,IAAb,CAAkBf,IAAI,CAACgB,MAAM,GAAG,CAAV,CAAJ,CAAiBC,GAAjB,CAAlB;AAC9B,MAAIA,GAAG,GAAG,CAAV,EAAaP,YAAY,CAACK,IAAb,CAAkBf,IAAI,CAACgB,MAAD,CAAJ,CAAaC,GAAG,GAAG,CAAnB,CAAlB;AACb,MAAIA,GAAG,GAAGjB,IAAI,CAAC,CAAD,CAAJ,CAAQQ,MAAR,GAAiB,CAA3B,EAA8BE,YAAY,CAACK,IAAb,CAAkBf,IAAI,CAACgB,MAAD,CAAJ,CAAaC,GAAG,GAAG,CAAnB,CAAlB;AAC9B,SAAOP,YAAP;AACD;;AAED,SAASL,WAAT,CAAqBL,IAArB,EAA2B;AACzB,QAAMkB,KAAK,GAAG,EAAd;;AACA,OAAK,MAAMF,MAAX,IAAqBhB,IAArB,EAA2B;AACzB,SAAK,MAAMc,IAAX,IAAmBE,MAAnB,EAA2B;AACzBE,MAAAA,KAAK,CAACH,IAAN,CAAWD,IAAX;AACD;AACF;;AACD,SAAOI,KAAP;AACD","sourcesContent":["export function bfs(grid, startNode, endNode) {\r\n  const visitedNodes = [];\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  let queue = [startNode];\r\n  let currentNode;\r\n  while (queue.length !== 0) {\r\n    currentNode = queue.shift();\r\n    const neighborList = getNeighbors(currentNode, grid);\r\n    console.log(neighborList);\r\n    for (const node in neighborList) {\r\n      queue.push(node);\r\n      console.log(queue);\r\n    }\r\n    queue.push();\r\n    visitedNodes.push(currentNode);\r\n  }\r\n}\r\n\r\nfunction getNeighbors(currentNode, grid) {\r\n  const neighborList = [];\r\n  const { column, row } = currentNode;\r\n  if (column > 0) neighborList.push(grid[column - 1][row]);\r\n  if (column < grid.length - 1) neighborList.push(grid[column + 1][row]);\r\n  if (row > 0) neighborList.push(grid[column][row - 1]);\r\n  if (row < grid[0].length - 1) neighborList.push(grid[column][row + 1]);\r\n  return neighborList;\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const column of grid) {\r\n    for (const node of column) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}