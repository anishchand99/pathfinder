{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\Anish\\\\Documents\\\\PROJECTS\\\\pathfinding\\\\pathfinder\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Anish\\\\Documents\\\\PROJECTS\\\\pathfinding\\\\pathfinder\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\Anish\\\\Documents\\\\PROJECTS\\\\pathfinding\\\\pathfinder\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\Anish\\\\Documents\\\\PROJECTS\\\\pathfinding\\\\pathfinder\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"C:\\\\Users\\\\Anish\\\\Documents\\\\PROJECTS\\\\pathfinding\\\\pathfinder\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import Node from\"./Node.js\";import\"./PathFinder.css\";import Navbar from\"./Navbar\";import{dijkstra,getShortestPath}from\"../algorithms/dijkstra\";import{START_NODE_COL,START_NODE_ROW,END_NODE_COL,END_NODE_ROW,GRID_COLS,GRID_ROWS}from\"../constants\";var createWallDictionary=function createWallDictionary(){var wallDict=new Map();for(var i=0;i<GRID_COLS;i++){for(var j=0;j<GRID_ROWS;j++){wallDict.set(\"\".concat(i,\"-\").concat(j),false);}}return wallDict;};var wallDictionary=createWallDictionary();var initialState={grid:[],startNodeCol:START_NODE_COL,startNodeRow:START_NODE_ROW,endNodeCol:END_NODE_COL,endNodeRow:END_NODE_ROW,algo:\"dijkstra\",speed:500,wallDict:wallDictionary};var PathFinder=/*#__PURE__*/function(_Component){_inherits(PathFinder,_Component);function PathFinder(){var _this;_classCallCheck(this,PathFinder);_this=_possibleConstructorReturn(this,_getPrototypeOf(PathFinder).call(this));_this.selectAlgo=function(algorithm){_this.setState({algo:algorithm});};_this.selectSpeed=function(speedX){_this.setState({speed:speedX});};_this.makeWall=function(node){var _this$state=_this.state,startNodeCol=_this$state.startNodeCol,startNodeRow=_this$state.startNodeRow,endNodeCol=_this$state.endNodeCol,endNodeRow=_this$state.endNodeRow;var updatedWall=_this.state.wallDict;//check if the node is already a wall\nvar alreadyIsWall=_this.state.wallDict.get(\"\".concat(node.props.column,\"-\").concat(node.props.row));//check if condition: don't make wall if it is a start node or end node\nif(!(node.props.row===startNodeRow&&node.props.column===startNodeCol||node.props.row===endNodeRow&&node.props.column===endNodeCol)){//check if condition: if already a wall, remove the wall\nif(alreadyIsWall){updatedWall.set(\"\".concat(node.props.column,\"-\").concat(node.props.row),false);}else{updatedWall.set(\"\".concat(node.props.column,\"-\").concat(node.props.row),true);}}_this.setState({wallDict:updatedWall},function(){var grid=drawInitialGrid(_this.state);_this.setState({grid:grid});});};_this.changeStartNode=function(node){_this.setState({startNodeCol:node.props.column,startNodeRow:node.props.row},function(){var grid=drawInitialGrid(_this.state);_this.setState({grid:grid});});};_this.changeEndNode=function(node){_this.setState({endNodeCol:node.props.column,endNodeRow:node.props.row},function(){var grid=drawInitialGrid(_this.state);_this.setState({grid:grid});});};_this.state=initialState;return _this;}_createClass(PathFinder,[{key:\"componentDidMount\",value:function componentDidMount(){var grid=drawInitialGrid(this.state);this.setState({grid:grid});}},{key:\"freezeButtons\",value:function freezeButtons(bool){var startButton=document.getElementById(\"start\");startButton.disabled=bool;var resetButton=document.getElementById(\"reset\");resetButton.disabled=bool;}},{key:\"visualizeAlgorithm\",value:function visualizeAlgorithm(){this.freezeButtons(true);var _this$state2=this.state,grid=_this$state2.grid,startNodeCol=_this$state2.startNodeCol,startNodeRow=_this$state2.startNodeRow,endNodeCol=_this$state2.endNodeCol,endNodeRow=_this$state2.endNodeRow,algo=_this$state2.algo;var startNode=grid[startNodeCol][startNodeRow];var endNode=grid[endNodeCol][endNodeRow];var visitedNodes=[];if(algo===\"dijkstra\"){visitedNodes=dijkstra(grid,startNode,endNode);}var shortestPath=getShortestPath(startNode,endNode);this.removeCSS();this.animateAlgorithm(visitedNodes,startNode,endNode,shortestPath);}//remove the CSS of the nodes after the first use of visualize button\n},{key:\"removeCSS\",value:function removeCSS(){while(document.querySelector(\".node-Visited\")!=null||document.querySelector(\".node-Path\")!=null){if(document.querySelector(\".node-Visited\")!=null){document.querySelector(\".node-Visited\").className=\"node\";}if(document.querySelector(\".node-Path\")!=null){document.querySelector(\".node-Path\").className=\"node\";}}}},{key:\"animateAlgorithm\",value:function animateAlgorithm(visitedNodes,startNode,endNode,shortestPath){var _this2=this;console.log(\"animated   \",visitedNodes);var speed=this.state.speed;var _loop=function _loop(i){if(i===visitedNodes.length-1){setTimeout(function(){_this2.displayShortestPath(shortestPath,startNode,endNode);},speed*i);return{v:void 0};}setTimeout(function(){var node=visitedNodes[i];if(node!==startNode&&node!==endNode){document.getElementById(\"node-\".concat(node.column,\"-\").concat(node.row)).className=\"node-Visited\";}},speed*i);};for(var i=0;i<visitedNodes.length;i++){var _ret=_loop(i);if(typeof _ret===\"object\")return _ret.v;}}},{key:\"displayShortestPath\",value:function displayShortestPath(shortestPath,startNode,endNode){for(var i=0;i<shortestPath.length;i++){var node=shortestPath[i];if(node!==startNode&&node!==endNode){document.getElementById(\"node-\".concat(node.column,\"-\").concat(node.row)).className=\"node-Path\";}}this.freezeButtons(false);}},{key:\"resetCSS\",//reset the CSS animations to go to fresh grid, used in the reset button\nvalue:function resetCSS(){while(document.querySelector(\".node-Visited\")!=null||document.querySelector(\".node-Path\")!=null||document.querySelector(\".nodewall\")!=null){if(document.querySelector(\".node-Visited\")!=null){document.querySelector(\".node-Visited\").className=\"node\";}if(document.querySelector(\".node-Path\")!=null){document.querySelector(\".node-Path\").className=\"node\";}if(document.querySelector(\".nodewall\")!=null){document.querySelector(\".nodewall\").className=\"node\";}}}},{key:\"render\",value:function render(){var _this3=this;var grid=this.state.grid;return React.createElement(\"div\",{className:\"container\"},React.createElement(Navbar,{selectAlgo:this.selectAlgo,selectSpeed:this.selectSpeed}),React.createElement(\"button\",{id:\"start\",onClick:function onClick(){return _this3.visualizeAlgorithm();}},\"Visualize!\"),React.createElement(\"button\",{id:\"reset\",onClick:function onClick(){return _this3.resetCSS();}},\"Reset!\"),React.createElement(\"div\",{className:\"grid\"},grid.map(function(row,rowIndex){return React.createElement(\"div\",{key:rowIndex},row.map(function(coln,colnIndex){var row=coln.row,column=coln.column,isStart=coln.isStart,isFinish=coln.isFinish,isWall=coln.isWall;return React.createElement(Node,{key:colnIndex,row:row,column:column,isFinish:isFinish,isStart:isStart,isWall:isWall,changeStartNode:_this3.changeStartNode,changeEndNode:_this3.changeEndNode,makeWall:_this3.makeWall,resetCSS:_this3.resetCSS});}));})));}}]);return PathFinder;}(Component);var drawInitialGrid=function drawInitialGrid(state){var grid=[];for(var column=0;column<GRID_COLS;column++){var currentColumn=[];for(var row=0;row<GRID_ROWS;row++){currentColumn.push(createNewNode(row,column,state));}grid.push(currentColumn);}return grid;};var createNewNode=function createNewNode(row,column,state){var startNodeCol=state.startNodeCol,startNodeRow=state.startNodeRow,endNodeCol=state.endNodeCol,endNodeRow=state.endNodeRow,wallDict=state.wallDict;return{column:column,row:row,distance:Infinity,previousNode:null,isVisited:false,isWall:wallDict.get(\"\".concat(column,\"-\").concat(row)),isStart:column===startNodeCol&&row===startNodeRow,isFinish:column===endNodeCol&&row===endNodeRow};};export default PathFinder;//Try a boolean vs string dicitonary string will be the coln and row and boolean is isWall.","map":{"version":3,"sources":["C:/Users/Anish/Documents/PROJECTS/pathfinding/pathfinder/src/PathFinder/PathFinder.js"],"names":["React","Component","Node","Navbar","dijkstra","getShortestPath","START_NODE_COL","START_NODE_ROW","END_NODE_COL","END_NODE_ROW","GRID_COLS","GRID_ROWS","createWallDictionary","wallDict","Map","i","j","set","wallDictionary","initialState","grid","startNodeCol","startNodeRow","endNodeCol","endNodeRow","algo","speed","PathFinder","selectAlgo","algorithm","setState","selectSpeed","speedX","makeWall","node","state","updatedWall","alreadyIsWall","get","props","column","row","drawInitialGrid","changeStartNode","changeEndNode","bool","startButton","document","getElementById","disabled","resetButton","freezeButtons","startNode","endNode","visitedNodes","shortestPath","removeCSS","animateAlgorithm","querySelector","className","console","log","length","setTimeout","displayShortestPath","visualizeAlgorithm","resetCSS","map","rowIndex","coln","colnIndex","isStart","isFinish","isWall","currentColumn","push","createNewNode","distance","Infinity","previousNode","isVisited"],"mappings":"kvBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,IAAP,KAAiB,WAAjB,CACA,MAAO,kBAAP,CACA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CACA,OAASC,QAAT,CAAmBC,eAAnB,KAA0C,wBAA1C,CACA,OACEC,cADF,CAEEC,cAFF,CAGEC,YAHF,CAIEC,YAJF,CAKEC,SALF,CAMEC,SANF,KAOO,cAPP,CAQA,GAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,EAAM,CACjC,GAAIC,CAAAA,QAAQ,CAAG,GAAIC,CAAAA,GAAJ,EAAf,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGL,SAApB,CAA+BK,CAAC,EAAhC,CAAoC,CAClC,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGL,SAApB,CAA+BK,CAAC,EAAhC,CAAoC,CAClCH,QAAQ,CAACI,GAAT,WAAgBF,CAAhB,aAAqBC,CAArB,EAA0B,KAA1B,EACD,CACF,CACD,MAAOH,CAAAA,QAAP,CACD,CARD,CASA,GAAIK,CAAAA,cAAc,CAAGN,oBAAoB,EAAzC,CACA,GAAMO,CAAAA,YAAY,CAAG,CACnBC,IAAI,CAAE,EADa,CAEnBC,YAAY,CAAEf,cAFK,CAGnBgB,YAAY,CAAEf,cAHK,CAInBgB,UAAU,CAAEf,YAJO,CAKnBgB,UAAU,CAAEf,YALO,CAMnBgB,IAAI,CAAE,UANa,CAOnBC,KAAK,CAAE,GAPY,CAQnBb,QAAQ,CAAEK,cARS,CAArB,C,GAUMS,CAAAA,U,oEACJ,qBAAc,4CACZ,8EADY,MAcdC,UAdc,CAcD,SAACC,SAAD,CAAe,CAC1B,MAAKC,QAAL,CAAc,CAAEL,IAAI,CAAEI,SAAR,CAAd,EACD,CAhBa,OAiBdE,WAjBc,CAiBA,SAACC,MAAD,CAAY,CACxB,MAAKF,QAAL,CAAc,CAAEJ,KAAK,CAAEM,MAAT,CAAd,EACD,CAnBa,OAoFdC,QApFc,CAoFH,SAACC,IAAD,CAAU,iBAC4C,MAAKC,KADjD,CACXd,YADW,aACXA,YADW,CACGC,YADH,aACGA,YADH,CACiBC,UADjB,aACiBA,UADjB,CAC6BC,UAD7B,aAC6BA,UAD7B,CAEnB,GAAIY,CAAAA,WAAW,CAAG,MAAKD,KAAL,CAAWtB,QAA7B,CACA;AACA,GAAMwB,CAAAA,aAAa,CAAG,MAAKF,KAAL,CAAWtB,QAAX,CAAoByB,GAApB,WACjBJ,IAAI,CAACK,KAAL,CAAWC,MADM,aACIN,IAAI,CAACK,KAAL,CAAWE,GADf,EAAtB,CAGA;AACA,GACE,EACGP,IAAI,CAACK,KAAL,CAAWE,GAAX,GAAmBnB,YAAnB,EACCY,IAAI,CAACK,KAAL,CAAWC,MAAX,GAAsBnB,YADxB,EAECa,IAAI,CAACK,KAAL,CAAWE,GAAX,GAAmBjB,UAAnB,EAAiCU,IAAI,CAACK,KAAL,CAAWC,MAAX,GAAsBjB,UAH1D,CADF,CAME,CACA;AACA,GAAIc,aAAJ,CAAmB,CACjBD,WAAW,CAACnB,GAAZ,WAAmBiB,IAAI,CAACK,KAAL,CAAWC,MAA9B,aAAwCN,IAAI,CAACK,KAAL,CAAWE,GAAnD,EAA0D,KAA1D,EACD,CAFD,IAEO,CACLL,WAAW,CAACnB,GAAZ,WAAmBiB,IAAI,CAACK,KAAL,CAAWC,MAA9B,aAAwCN,IAAI,CAACK,KAAL,CAAWE,GAAnD,EAA0D,IAA1D,EACD,CACF,CACD,MAAKX,QAAL,CACE,CACEjB,QAAQ,CAAEuB,WADZ,CADF,CAIE,UAAM,CACJ,GAAMhB,CAAAA,IAAI,CAAGsB,eAAe,CAAC,MAAKP,KAAN,CAA5B,CACA,MAAKL,QAAL,CAAc,CAAEV,IAAI,CAAEA,IAAR,CAAd,EACD,CAPH,EASD,CAnHa,OAoHduB,eApHc,CAoHI,SAACT,IAAD,CAAU,CAC1B,MAAKJ,QAAL,CACE,CACET,YAAY,CAAEa,IAAI,CAACK,KAAL,CAAWC,MAD3B,CAEElB,YAAY,CAAEY,IAAI,CAACK,KAAL,CAAWE,GAF3B,CADF,CAKE,UAAM,CACJ,GAAMrB,CAAAA,IAAI,CAAGsB,eAAe,CAAC,MAAKP,KAAN,CAA5B,CACA,MAAKL,QAAL,CAAc,CAAEV,IAAI,CAAEA,IAAR,CAAd,EACD,CARH,EAUD,CA/Ha,OAgIdwB,aAhIc,CAgIE,SAACV,IAAD,CAAU,CACxB,MAAKJ,QAAL,CACE,CACEP,UAAU,CAAEW,IAAI,CAACK,KAAL,CAAWC,MADzB,CAEEhB,UAAU,CAAEU,IAAI,CAACK,KAAL,CAAWE,GAFzB,CADF,CAKE,UAAM,CACJ,GAAMrB,CAAAA,IAAI,CAAGsB,eAAe,CAAC,MAAKP,KAAN,CAA5B,CACA,MAAKL,QAAL,CAAc,CAAEV,IAAI,CAAEA,IAAR,CAAd,EACD,CARH,EAUD,CA3Ia,CAEZ,MAAKe,KAAL,CAAahB,YAAb,CAFY,aAGb,C,oFACmB,CAClB,GAAMC,CAAAA,IAAI,CAAGsB,eAAe,CAAC,KAAKP,KAAN,CAA5B,CACA,KAAKL,QAAL,CAAc,CAAEV,IAAI,CAAEA,IAAR,CAAd,EACD,C,oDACayB,I,CAAM,CAClB,GAAIC,CAAAA,WAAW,CAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAlB,CACAF,WAAW,CAACG,QAAZ,CAAuBJ,IAAvB,CACA,GAAIK,CAAAA,WAAW,CAAGH,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAlB,CACAE,WAAW,CAACD,QAAZ,CAAuBJ,IAAvB,CACD,C,+DAOoB,CACnB,KAAKM,aAAL,CAAmB,IAAnB,EADmB,iBASf,KAAKhB,KATU,CAGjBf,IAHiB,cAGjBA,IAHiB,CAIjBC,YAJiB,cAIjBA,YAJiB,CAKjBC,YALiB,cAKjBA,YALiB,CAMjBC,UANiB,cAMjBA,UANiB,CAOjBC,UAPiB,cAOjBA,UAPiB,CAQjBC,IARiB,cAQjBA,IARiB,CAUnB,GAAM2B,CAAAA,SAAS,CAAGhC,IAAI,CAACC,YAAD,CAAJ,CAAmBC,YAAnB,CAAlB,CACA,GAAM+B,CAAAA,OAAO,CAAGjC,IAAI,CAACG,UAAD,CAAJ,CAAiBC,UAAjB,CAAhB,CACA,GAAI8B,CAAAA,YAAY,CAAG,EAAnB,CACA,GAAI7B,IAAI,GAAK,UAAb,CAAyB,CACvB6B,YAAY,CAAGlD,QAAQ,CAACgB,IAAD,CAAOgC,SAAP,CAAkBC,OAAlB,CAAvB,CACD,CACD,GAAME,CAAAA,YAAY,CAAGlD,eAAe,CAAC+C,SAAD,CAAYC,OAAZ,CAApC,CACA,KAAKG,SAAL,GACA,KAAKC,gBAAL,CAAsBH,YAAtB,CAAoCF,SAApC,CAA+CC,OAA/C,CAAwDE,YAAxD,EACD,CAED;6CACY,CACV,MACER,QAAQ,CAACW,aAAT,mBAA2C,IAA3C,EACAX,QAAQ,CAACW,aAAT,gBAAwC,IAF1C,CAGE,CACA,GAAIX,QAAQ,CAACW,aAAT,mBAA2C,IAA/C,CAAqD,CACnDX,QAAQ,CAACW,aAAT,kBAAwCC,SAAxC,CAAoD,MAApD,CACD,CACD,GAAIZ,QAAQ,CAACW,aAAT,gBAAwC,IAA5C,CAAkD,CAChDX,QAAQ,CAACW,aAAT,eAAqCC,SAArC,CAAiD,MAAjD,CACD,CACF,CACF,C,0DACgBL,Y,CAAcF,S,CAAWC,O,CAASE,Y,CAAc,iBAC/DK,OAAO,CAACC,GAAR,CAAY,aAAZ,CAA2BP,YAA3B,EAD+D,GAEvD5B,CAAAA,KAFuD,CAE7C,KAAKS,KAFwC,CAEvDT,KAFuD,0BAGtDX,CAHsD,EAI7D,GAAIA,CAAC,GAAKuC,YAAY,CAACQ,MAAb,CAAsB,CAAhC,CAAmC,CACjCC,UAAU,CAAC,UAAM,CACf,MAAI,CAACC,mBAAL,CAAyBT,YAAzB,CAAuCH,SAAvC,CAAkDC,OAAlD,EACD,CAFS,CAEP3B,KAAK,CAAGX,CAFD,CAAV,CAGA,iBACD,CACDgD,UAAU,CAAC,UAAM,CACf,GAAM7B,CAAAA,IAAI,CAAGoB,YAAY,CAACvC,CAAD,CAAzB,CACA,GAAImB,IAAI,GAAKkB,SAAT,EAAsBlB,IAAI,GAAKmB,OAAnC,CAA4C,CAC1CN,QAAQ,CAACC,cAAT,gBAAgCd,IAAI,CAACM,MAArC,aAA+CN,IAAI,CAACO,GAApD,GAA2DkB,SAA3D,CACE,cADF,CAED,CACF,CANS,CAMPjC,KAAK,CAAGX,CAND,CAAV,CAV6D,EAG/D,IAAK,GAAIA,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGuC,YAAY,CAACQ,MAAjC,CAAyC/C,CAAC,EAA1C,CAA8C,gBAArCA,CAAqC,0CAc7C,CACF,C,gEACmBwC,Y,CAAcH,S,CAAWC,O,CAAS,CACpD,IAAK,GAAItC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGwC,YAAY,CAACO,MAAjC,CAAyC/C,CAAC,EAA1C,CAA8C,CAC5C,GAAMmB,CAAAA,IAAI,CAAGqB,YAAY,CAACxC,CAAD,CAAzB,CACA,GAAImB,IAAI,GAAKkB,SAAT,EAAsBlB,IAAI,GAAKmB,OAAnC,CAA4C,CAC1CN,QAAQ,CAACC,cAAT,gBAAgCd,IAAI,CAACM,MAArC,aAA+CN,IAAI,CAACO,GAApD,GAA2DkB,SAA3D,CACE,WADF,CAED,CACF,CACD,KAAKR,aAAL,CAAmB,KAAnB,EACD,C,kBA0DD;yBACW,CACT,MACEJ,QAAQ,CAACW,aAAT,mBAA2C,IAA3C,EACAX,QAAQ,CAACW,aAAT,gBAAwC,IADxC,EAEAX,QAAQ,CAACW,aAAT,eAAuC,IAHzC,CAIE,CACA,GAAIX,QAAQ,CAACW,aAAT,mBAA2C,IAA/C,CAAqD,CACnDX,QAAQ,CAACW,aAAT,kBAAwCC,SAAxC,CAAoD,MAApD,CACD,CACD,GAAIZ,QAAQ,CAACW,aAAT,gBAAwC,IAA5C,CAAkD,CAChDX,QAAQ,CAACW,aAAT,eAAqCC,SAArC,CAAiD,MAAjD,CACD,CACD,GAAIZ,QAAQ,CAACW,aAAT,eAAuC,IAA3C,CAAiD,CAC/CX,QAAQ,CAACW,aAAT,cAAoCC,SAApC,CAAgD,MAAhD,CACD,CACF,CACF,C,uCACQ,oBACCvC,CAAAA,IADD,CACU,KAAKe,KADf,CACCf,IADD,CAEP,MACE,4BAAK,SAAS,CAAC,WAAf,EACE,oBAAC,MAAD,EACE,UAAU,CAAE,KAAKQ,UADnB,CAEE,WAAW,CAAE,KAAKG,WAFpB,EADF,CAKE,8BAAQ,EAAE,CAAC,OAAX,CAAmB,OAAO,CAAE,yBAAM,CAAA,MAAI,CAACkC,kBAAL,EAAN,EAA5B,eALF,CAQE,8BAAQ,EAAE,CAAC,OAAX,CAAmB,OAAO,CAAE,yBAAM,CAAA,MAAI,CAACC,QAAL,EAAN,EAA5B,WARF,CAWE,2BAAK,SAAS,CAAC,MAAf,EACG9C,IAAI,CAAC+C,GAAL,CAAS,SAAC1B,GAAD,CAAM2B,QAAN,CAAmB,CAC3B,MACE,4BAAK,GAAG,CAAEA,QAAV,EACG3B,GAAG,CAAC0B,GAAJ,CAAQ,SAACE,IAAD,CAAOC,SAAP,CAAqB,IACpB7B,CAAAA,GADoB,CACuB4B,IADvB,CACpB5B,GADoB,CACfD,MADe,CACuB6B,IADvB,CACf7B,MADe,CACP+B,OADO,CACuBF,IADvB,CACPE,OADO,CACEC,QADF,CACuBH,IADvB,CACEG,QADF,CACYC,MADZ,CACuBJ,IADvB,CACYI,MADZ,CAE5B,MACE,qBAAC,IAAD,EACE,GAAG,CAAEH,SADP,CAEE,GAAG,CAAE7B,GAFP,CAGE,MAAM,CAAED,MAHV,CAIE,QAAQ,CAAEgC,QAJZ,CAKE,OAAO,CAAED,OALX,CAME,MAAM,CAAEE,MANV,CAOE,eAAe,CAAE,MAAI,CAAC9B,eAPxB,CAQE,aAAa,CAAE,MAAI,CAACC,aARtB,CASE,QAAQ,CAAE,MAAI,CAACX,QATjB,CAUE,QAAQ,CAAE,MAAI,CAACiC,QAVjB,EADF,CAcD,CAhBA,CADH,CADF,CAqBD,CAtBA,CADH,CAXF,CADF,CAuCD,C,wBAzMsBjE,S,EA4MzB,GAAMyC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACP,KAAD,CAAW,CACjC,GAAMf,CAAAA,IAAI,CAAG,EAAb,CACA,IAAK,GAAIoB,CAAAA,MAAM,CAAG,CAAlB,CAAqBA,MAAM,CAAG9B,SAA9B,CAAyC8B,MAAM,EAA/C,CAAmD,CACjD,GAAIkC,CAAAA,aAAa,CAAG,EAApB,CACA,IAAK,GAAIjC,CAAAA,GAAG,CAAG,CAAf,CAAkBA,GAAG,CAAG9B,SAAxB,CAAmC8B,GAAG,EAAtC,CAA0C,CACxCiC,aAAa,CAACC,IAAd,CAAmBC,aAAa,CAACnC,GAAD,CAAMD,MAAN,CAAcL,KAAd,CAAhC,EACD,CACDf,IAAI,CAACuD,IAAL,CAAUD,aAAV,EACD,CACD,MAAOtD,CAAAA,IAAP,CACD,CAVD,CAYA,GAAMwD,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACnC,GAAD,CAAMD,MAAN,CAAcL,KAAd,CAAwB,IAE1Cd,CAAAA,YAF0C,CAOxCc,KAPwC,CAE1Cd,YAF0C,CAG1CC,YAH0C,CAOxCa,KAPwC,CAG1Cb,YAH0C,CAI1CC,UAJ0C,CAOxCY,KAPwC,CAI1CZ,UAJ0C,CAK1CC,UAL0C,CAOxCW,KAPwC,CAK1CX,UAL0C,CAM1CX,QAN0C,CAOxCsB,KAPwC,CAM1CtB,QAN0C,CAQ5C,MAAO,CACL2B,MAAM,CAANA,MADK,CAELC,GAAG,CAAHA,GAFK,CAGLoC,QAAQ,CAAEC,QAHL,CAILC,YAAY,CAAE,IAJT,CAKLC,SAAS,CAAE,KALN,CAMLP,MAAM,CAAE5D,QAAQ,CAACyB,GAAT,WAAgBE,MAAhB,aAA0BC,GAA1B,EANH,CAOL8B,OAAO,CAAE/B,MAAM,GAAKnB,YAAX,EAA2BoB,GAAG,GAAKnB,YAPvC,CAQLkD,QAAQ,CAAEhC,MAAM,GAAKjB,UAAX,EAAyBkB,GAAG,GAAKjB,UARtC,CAAP,CAUD,CAlBD,CAoBA,cAAeG,CAAAA,UAAf,CAEA","sourcesContent":["import React, { Component } from \"react\";\r\nimport Node from \"./Node.js\";\r\nimport \"./PathFinder.css\";\r\nimport Navbar from \"./Navbar\";\r\nimport { dijkstra, getShortestPath } from \"../algorithms/dijkstra\";\r\nimport {\r\n  START_NODE_COL,\r\n  START_NODE_ROW,\r\n  END_NODE_COL,\r\n  END_NODE_ROW,\r\n  GRID_COLS,\r\n  GRID_ROWS,\r\n} from \"../constants\";\r\nconst createWallDictionary = () => {\r\n  let wallDict = new Map();\r\n  for (let i = 0; i < GRID_COLS; i++) {\r\n    for (let j = 0; j < GRID_ROWS; j++) {\r\n      wallDict.set(`${i}-${j}`, false);\r\n    }\r\n  }\r\n  return wallDict;\r\n};\r\nlet wallDictionary = createWallDictionary();\r\nconst initialState = {\r\n  grid: [],\r\n  startNodeCol: START_NODE_COL,\r\n  startNodeRow: START_NODE_ROW,\r\n  endNodeCol: END_NODE_COL,\r\n  endNodeRow: END_NODE_ROW,\r\n  algo: \"dijkstra\",\r\n  speed: 500,\r\n  wallDict: wallDictionary,\r\n};\r\nclass PathFinder extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = initialState;\r\n  }\r\n  componentDidMount() {\r\n    const grid = drawInitialGrid(this.state);\r\n    this.setState({ grid: grid });\r\n  }\r\n  freezeButtons(bool) {\r\n    let startButton = document.getElementById(\"start\");\r\n    startButton.disabled = bool;\r\n    let resetButton = document.getElementById(\"reset\");\r\n    resetButton.disabled = bool;\r\n  }\r\n  selectAlgo = (algorithm) => {\r\n    this.setState({ algo: algorithm });\r\n  };\r\n  selectSpeed = (speedX) => {\r\n    this.setState({ speed: speedX });\r\n  };\r\n  visualizeAlgorithm() {\r\n    this.freezeButtons(true);\r\n    const {\r\n      grid,\r\n      startNodeCol,\r\n      startNodeRow,\r\n      endNodeCol,\r\n      endNodeRow,\r\n      algo,\r\n    } = this.state;\r\n    const startNode = grid[startNodeCol][startNodeRow];\r\n    const endNode = grid[endNodeCol][endNodeRow];\r\n    let visitedNodes = [];\r\n    if (algo === \"dijkstra\") {\r\n      visitedNodes = dijkstra(grid, startNode, endNode);\r\n    }\r\n    const shortestPath = getShortestPath(startNode, endNode);\r\n    this.removeCSS();\r\n    this.animateAlgorithm(visitedNodes, startNode, endNode, shortestPath);\r\n  }\r\n\r\n  //remove the CSS of the nodes after the first use of visualize button\r\n  removeCSS() {\r\n    while (\r\n      document.querySelector(`.node-Visited`) != null ||\r\n      document.querySelector(`.node-Path`) != null\r\n    ) {\r\n      if (document.querySelector(`.node-Visited`) != null) {\r\n        document.querySelector(`.node-Visited`).className = \"node\";\r\n      }\r\n      if (document.querySelector(`.node-Path`) != null) {\r\n        document.querySelector(`.node-Path`).className = \"node\";\r\n      }\r\n    }\r\n  }\r\n  animateAlgorithm(visitedNodes, startNode, endNode, shortestPath) {\r\n    console.log(\"animated   \", visitedNodes);\r\n    const { speed } = this.state;\r\n    for (let i = 0; i < visitedNodes.length; i++) {\r\n      if (i === visitedNodes.length - 1) {\r\n        setTimeout(() => {\r\n          this.displayShortestPath(shortestPath, startNode, endNode);\r\n        }, speed * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodes[i];\r\n        if (node !== startNode && node !== endNode) {\r\n          document.getElementById(`node-${node.column}-${node.row}`).className =\r\n            \"node-Visited\";\r\n        }\r\n      }, speed * i);\r\n    }\r\n  }\r\n  displayShortestPath(shortestPath, startNode, endNode) {\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n      const node = shortestPath[i];\r\n      if (node !== startNode && node !== endNode) {\r\n        document.getElementById(`node-${node.column}-${node.row}`).className =\r\n          \"node-Path\";\r\n      }\r\n    }\r\n    this.freezeButtons(false);\r\n  }\r\n  makeWall = (node) => {\r\n    const { startNodeCol, startNodeRow, endNodeCol, endNodeRow } = this.state;\r\n    let updatedWall = this.state.wallDict;\r\n    //check if the node is already a wall\r\n    const alreadyIsWall = this.state.wallDict.get(\r\n      `${node.props.column}-${node.props.row}`\r\n    );\r\n    //check if condition: don't make wall if it is a start node or end node\r\n    if (\r\n      !(\r\n        (node.props.row === startNodeRow &&\r\n          node.props.column === startNodeCol) ||\r\n        (node.props.row === endNodeRow && node.props.column === endNodeCol)\r\n      )\r\n    ) {\r\n      //check if condition: if already a wall, remove the wall\r\n      if (alreadyIsWall) {\r\n        updatedWall.set(`${node.props.column}-${node.props.row}`, false);\r\n      } else {\r\n        updatedWall.set(`${node.props.column}-${node.props.row}`, true);\r\n      }\r\n    }\r\n    this.setState(\r\n      {\r\n        wallDict: updatedWall,\r\n      },\r\n      () => {\r\n        const grid = drawInitialGrid(this.state);\r\n        this.setState({ grid: grid });\r\n      }\r\n    );\r\n  };\r\n  changeStartNode = (node) => {\r\n    this.setState(\r\n      {\r\n        startNodeCol: node.props.column,\r\n        startNodeRow: node.props.row,\r\n      },\r\n      () => {\r\n        const grid = drawInitialGrid(this.state);\r\n        this.setState({ grid: grid });\r\n      }\r\n    );\r\n  };\r\n  changeEndNode = (node) => {\r\n    this.setState(\r\n      {\r\n        endNodeCol: node.props.column,\r\n        endNodeRow: node.props.row,\r\n      },\r\n      () => {\r\n        const grid = drawInitialGrid(this.state);\r\n        this.setState({ grid: grid });\r\n      }\r\n    );\r\n  };\r\n\r\n  //reset the CSS animations to go to fresh grid, used in the reset button\r\n  resetCSS() {\r\n    while (\r\n      document.querySelector(`.node-Visited`) != null ||\r\n      document.querySelector(`.node-Path`) != null ||\r\n      document.querySelector(`.nodewall`) != null\r\n    ) {\r\n      if (document.querySelector(`.node-Visited`) != null) {\r\n        document.querySelector(`.node-Visited`).className = \"node\";\r\n      }\r\n      if (document.querySelector(`.node-Path`) != null) {\r\n        document.querySelector(`.node-Path`).className = \"node\";\r\n      }\r\n      if (document.querySelector(`.nodewall`) != null) {\r\n        document.querySelector(`.nodewall`).className = \"node\";\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <Navbar\r\n          selectAlgo={this.selectAlgo}\r\n          selectSpeed={this.selectSpeed}\r\n        ></Navbar>\r\n        <button id=\"start\" onClick={() => this.visualizeAlgorithm()}>\r\n          Visualize!\r\n        </button>\r\n        <button id=\"reset\" onClick={() => this.resetCSS()}>\r\n          Reset!\r\n        </button>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIndex) => {\r\n            return (\r\n              <div key={rowIndex}>\r\n                {row.map((coln, colnIndex) => {\r\n                  const { row, column, isStart, isFinish, isWall } = coln;\r\n                  return (\r\n                    <Node\r\n                      key={colnIndex}\r\n                      row={row}\r\n                      column={column}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      changeStartNode={this.changeStartNode}\r\n                      changeEndNode={this.changeEndNode}\r\n                      makeWall={this.makeWall}\r\n                      resetCSS={this.resetCSS}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst drawInitialGrid = (state) => {\r\n  const grid = [];\r\n  for (let column = 0; column < GRID_COLS; column++) {\r\n    let currentColumn = [];\r\n    for (let row = 0; row < GRID_ROWS; row++) {\r\n      currentColumn.push(createNewNode(row, column, state));\r\n    }\r\n    grid.push(currentColumn);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNewNode = (row, column, state) => {\r\n  const {\r\n    startNodeCol,\r\n    startNodeRow,\r\n    endNodeCol,\r\n    endNodeRow,\r\n    wallDict,\r\n  } = state;\r\n  return {\r\n    column,\r\n    row,\r\n    distance: Infinity,\r\n    previousNode: null,\r\n    isVisited: false,\r\n    isWall: wallDict.get(`${column}-${row}`),\r\n    isStart: column === startNodeCol && row === startNodeRow,\r\n    isFinish: column === endNodeCol && row === endNodeRow,\r\n  };\r\n};\r\n\r\nexport default PathFinder;\r\n\r\n//Try a boolean vs string dicitonary string will be the coln and row and boolean is isWall.\r\n"]},"metadata":{},"sourceType":"module"}