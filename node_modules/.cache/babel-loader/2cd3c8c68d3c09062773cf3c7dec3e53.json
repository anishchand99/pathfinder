{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anish\\\\Documents\\\\Projects\\\\pathfinding\\\\src\\\\PathFinder\\\\Node.js\";\nimport React, { Component } from \"react\";\nimport \"./Node.css\";\n\nclass Node extends Component {\n  constructor() {\n    super();\n\n    this.onMouseDown = (e, node) => {\n      console.log(e.target.className);\n      this.setState({\n        isMouseDown: true,\n        isMouseUp: false\n      });\n    };\n\n    this.onMouseUp = (e, node) => {\n      console.log(e.target.className);\n      this.setState({\n        isMouseUp: true,\n        isMouseDown: false\n      });\n    };\n\n    this.onMouseOver = (e, node) => {\n      console.log(\"onMouseOver\"); // const [makeWall] = this.props;\n\n      if (this.state.didMouseMove != true) {\n        this.setState({\n          didMouseMove: true\n        });\n      }\n\n      if (this.state.isMouseDown === true) {\n        // makeWall(node);\n        console.log(\"Hello\");\n      }\n    };\n\n    this.onMouseEnter = () => {\n      this.setState({\n        didMouseEnter: true\n      });\n    };\n\n    this.onMouseLeave = () => {\n      this.setState({\n        didMouseLeave: true,\n        didMouseEnter: false\n      });\n    };\n\n    this.onDragStart = (e, node) => {\n      e.dataTransfer.setData(\"text\", \"node-\".concat(node.props.column, \"-\").concat(node.props.row));\n    };\n\n    this.onDragOver = e => {\n      e.preventDefault();\n    };\n\n    this.onDrop = (e, node) => {\n      const _this$props = this.props,\n            changeStartNode = _this$props.changeStartNode,\n            changeEndNode = _this$props.changeEndNode,\n            resetCSS = _this$props.resetCSS; //id of the 'soon to be previous' startNode/endNode, current startNode/endNode that will be previous after drag n drop\n\n      let data = e.dataTransfer.getData(\"text\");\n\n      if (document.getElementById(data).className === \"nodestart\") {\n        document.querySelector(\".nodestart\").className = \"node\";\n        document.getElementById(\"node-\".concat(node.props.column, \"-\").concat(node.props.row)).className = \"nodestart\";\n        changeStartNode(node);\n      }\n\n      if (document.getElementById(data).className === \"nodefinish\") {\n        document.querySelector(\".nodefinish\").className = \"node\";\n        document.getElementById(\"node-\".concat(node.props.column, \"-\").concat(node.props.row)).className = \"nodefinish\";\n        changeEndNode(node);\n      }\n\n      resetCSS();\n    };\n\n    this.state = {\n      isMouseUp: true,\n      isMouseDown: false,\n      didMouseEnter: false,\n      didMouseMove: false,\n      didMouseLeave: false\n    };\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          column = _this$props2.column,\n          row = _this$props2.row,\n          isStart = _this$props2.isStart,\n          isFinish = _this$props2.isFinish,\n          isWall = _this$props2.isWall;\n    const extraClassName = isFinish ? \"finish\" : isStart ? \"start\" : isWall ? \"node-wall\" : \"\";\n    let isDragable;\n\n    if (isStart) {\n      isDragable = true;\n    } else if (isFinish) {\n      isDragable = true;\n    } else {\n      isDragable = false;\n    }\n\n    return React.createElement(\"div\", {\n      draggable: isDragable,\n      id: \"node-\".concat(column, \"-\").concat(row),\n      className: \"node\".concat(extraClassName),\n      onMouseDown: e => this.onMouseDown(e, this),\n      onMouseOver: e => this.onMouseOver(e, this),\n      onDragStart: e => this.onDragStart(e, this),\n      onDragOver: e => this.onDragOver(e),\n      onDrop: e => this.onDrop(e, this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Node;","map":{"version":3,"sources":["C:/Users/Anish/Documents/Projects/pathfinding/src/PathFinder/Node.js"],"names":["React","Component","Node","constructor","onMouseDown","e","node","console","log","target","className","setState","isMouseDown","isMouseUp","onMouseUp","onMouseOver","state","didMouseMove","onMouseEnter","didMouseEnter","onMouseLeave","didMouseLeave","onDragStart","dataTransfer","setData","props","column","row","onDragOver","preventDefault","onDrop","changeStartNode","changeEndNode","resetCSS","data","getData","document","getElementById","querySelector","render","isStart","isFinish","isWall","extraClassName","isDragable"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Node.css\";\r\n\r\nclass Node extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isMouseUp: true,\r\n      isMouseDown: false,\r\n      didMouseEnter: false,\r\n      didMouseMove: false,\r\n      didMouseLeave: false,\r\n    };\r\n  }\r\n  onMouseDown = (e, node) => {\r\n    console.log(e.target.className);\r\n    this.setState({ isMouseDown: true, isMouseUp: false });\r\n  };\r\n  onMouseUp = (e, node) => {\r\n    console.log(e.target.className);\r\n    this.setState({ isMouseUp: true, isMouseDown: false });\r\n  };\r\n  onMouseOver = (e, node) => {\r\n    console.log(\"onMouseOver\");\r\n    // const [makeWall] = this.props;\r\n    if (this.state.didMouseMove != true) {\r\n      this.setState({ didMouseMove: true });\r\n    }\r\n    if (this.state.isMouseDown === true) {\r\n      // makeWall(node);\r\n      console.log(\"Hello\");\r\n    }\r\n  };\r\n  onMouseEnter = () => {\r\n    this.setState({ didMouseEnter: true });\r\n  };\r\n  onMouseLeave = () => {\r\n    this.setState({ didMouseLeave: true, didMouseEnter: false });\r\n  };\r\n  onDragStart = (e, node) => {\r\n    e.dataTransfer.setData(\r\n      \"text\",\r\n      `node-${node.props.column}-${node.props.row}`\r\n    );\r\n  };\r\n  onDragOver = (e) => {\r\n    e.preventDefault();\r\n  };\r\n  onDrop = (e, node) => {\r\n    const { changeStartNode, changeEndNode, resetCSS } = this.props;\r\n    //id of the 'soon to be previous' startNode/endNode, current startNode/endNode that will be previous after drag n drop\r\n    let data = e.dataTransfer.getData(\"text\");\r\n    if (document.getElementById(data).className === \"nodestart\") {\r\n      document.querySelector(`.nodestart`).className = \"node\";\r\n      document.getElementById(\r\n        `node-${node.props.column}-${node.props.row}`\r\n      ).className = \"nodestart\";\r\n      changeStartNode(node);\r\n    }\r\n    if (document.getElementById(data).className === \"nodefinish\") {\r\n      document.querySelector(`.nodefinish`).className = \"node\";\r\n      document.getElementById(\r\n        `node-${node.props.column}-${node.props.row}`\r\n      ).className = \"nodefinish\";\r\n      changeEndNode(node);\r\n    }\r\n    resetCSS();\r\n  };\r\n  render() {\r\n    const { column, row, isStart, isFinish, isWall } = this.props;\r\n    const extraClassName = isFinish\r\n      ? \"finish\"\r\n      : isStart\r\n      ? \"start\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : \"\";\r\n    let isDragable;\r\n    if (isStart) {\r\n      isDragable = true;\r\n    } else if (isFinish) {\r\n      isDragable = true;\r\n    } else {\r\n      isDragable = false;\r\n    }\r\n    return (\r\n      <div\r\n        draggable={isDragable}\r\n        id={`node-${column}-${row}`}\r\n        className={`node${extraClassName}`}\r\n        onMouseDown={(e) => this.onMouseDown(e, this)}\r\n        onMouseOver={(e) => this.onMouseOver(e, this)}\r\n        onDragStart={(e) => this.onDragStart(e, this)}\r\n        onDragOver={(e) => this.onDragOver(e)}\r\n        onDrop={(e) => this.onDrop(e, this)}\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default Node;\r\n"]},"metadata":{},"sourceType":"module"}