{"ast":null,"code":"export function dijkstra(grid, startNode, endNode) {\n  const visitedNodes = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (unvisitedNodes.length > 0) {\n    //u is the node with shortest distance in univistednodes\n    //remove closestNode from unvisited nodes\n    const closestNeighbor = getClosestNode(unvisitedNodes); //alt = distance u + distance (v-u)\n\n    closestNeighbor.distance = startNode.distance + 1;\n    console.log(closestNeighbor.distance); //isVisited = true\n    //if  alt < dist[v]\n    //dist[v] = alt\n    //previous node = u\n  }\n}\n\nfunction getClosestNode(unvisitedNodes) {\n  //arrange in ascending order by distance\n  unvisitedNodes.sort((A, B) => A.distance - B.distance); //remove closestNode from unvisited nodes\n\n  const node = unvisitedNodes.shift();\n  return node;\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const column of grid) {\n    for (const node of column) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}","map":{"version":3,"sources":["C:/Users/Anish/Documents/Projects/pathfinding/src/algorithms/dijkstra.js"],"names":["dijkstra","grid","startNode","endNode","visitedNodes","distance","unvisitedNodes","getAllNodes","length","closestNeighbor","getClosestNode","console","log","sort","A","B","node","shift","nodes","column","push"],"mappings":"AAAA,OAAO,SAASA,QAAT,CAAkBC,IAAlB,EAAwBC,SAAxB,EAAmCC,OAAnC,EAA4C;AACjD,QAAMC,YAAY,GAAG,EAArB;AACAF,EAAAA,SAAS,CAACG,QAAV,GAAqB,CAArB;AACA,QAAMC,cAAc,GAAGC,WAAW,CAACN,IAAD,CAAlC;;AACA,SAAOK,cAAc,CAACE,MAAf,GAAwB,CAA/B,EAAkC;AAChC;AACA;AACA,UAAMC,eAAe,GAAGC,cAAc,CAACJ,cAAD,CAAtC,CAHgC,CAIhC;;AACAG,IAAAA,eAAe,CAACJ,QAAhB,GAA2BH,SAAS,CAACG,QAAV,GAAqB,CAAhD;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYH,eAAe,CAACJ,QAA5B,EANgC,CAOhC;AACA;AACA;AACA;AACD;AACF;;AAED,SAASK,cAAT,CAAwBJ,cAAxB,EAAwC;AACtC;AACAA,EAAAA,cAAc,CAACO,IAAf,CAAoB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACT,QAAF,GAAaU,CAAC,CAACV,QAA7C,EAFsC,CAGtC;;AACA,QAAMW,IAAI,GAAGV,cAAc,CAACW,KAAf,EAAb;AACA,SAAOD,IAAP;AACD;;AAED,SAAST,WAAT,CAAqBN,IAArB,EAA2B;AACzB,QAAMiB,KAAK,GAAG,EAAd;;AACA,OAAK,MAAMC,MAAX,IAAqBlB,IAArB,EAA2B;AACzB,SAAK,MAAMe,IAAX,IAAmBG,MAAnB,EAA2B;AACzBD,MAAAA,KAAK,CAACE,IAAN,CAAWJ,IAAX;AACD;AACF;;AACD,SAAOE,KAAP;AACD","sourcesContent":["export function dijkstra(grid, startNode, endNode) {\r\n  const visitedNodes = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (unvisitedNodes.length > 0) {\r\n    //u is the node with shortest distance in univistednodes\r\n    //remove closestNode from unvisited nodes\r\n    const closestNeighbor = getClosestNode(unvisitedNodes);\r\n    //alt = distance u + distance (v-u)\r\n    closestNeighbor.distance = startNode.distance + 1;\r\n    console.log(closestNeighbor.distance);\r\n    //isVisited = true\r\n    //if  alt < dist[v]\r\n    //dist[v] = alt\r\n    //previous node = u\r\n  }\r\n}\r\n\r\nfunction getClosestNode(unvisitedNodes) {\r\n  //arrange in ascending order by distance\r\n  unvisitedNodes.sort((A, B) => A.distance - B.distance);\r\n  //remove closestNode from unvisited nodes\r\n  const node = unvisitedNodes.shift();\r\n  return node;\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const column of grid) {\r\n    for (const node of column) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}