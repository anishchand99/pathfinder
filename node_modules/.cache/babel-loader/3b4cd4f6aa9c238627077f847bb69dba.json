{"ast":null,"code":"import { END_NODE_COL, END_NODE_ROW } from \"../constants\";\nexport function dijkstra(grid, startNode, endNode) {\n  const visitedNodes = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (unvisitedNodes.length > 0) {\n    //   start at the start node and susequently get the closest neighbor\n    const currentNode = getClosestNode(unvisitedNodes);\n    const neighborList = getNeighbors(currentNode, grid);\n    if (currentNode.isWall) continue;\n    if (currentNode.distance === Infinity) return visitedNodes;\n    currentNode.isVisited = true;\n    visitedNodes.push(currentNode);\n    if (currentNode === endNode) return visitedNodes;\n\n    for (const neighbor of neighborList) {\n      neighbor.distance = currentNode.distance + 1;\n      neighbor.previousNode = currentNode;\n    }\n  }\n}\n\nfunction getNeighbors(currentNode, grid) {\n  const neighborList = [];\n  const column = currentNode.column,\n        row = currentNode.row;\n  if (column > 0) neighborList.push(grid[column - 1][row]);\n  if (column < END_NODE_COL) neighborList.push(grid[column + 1][row]);\n  if (row > 0) neighborList.push(grid[column][row - 1]);\n  if (row < END_NODE_ROW) neighborList.push(grid[column][row + 1]);\n  return neighborList;\n}\n\nfunction getClosestNode(unvisitedNodes) {\n  //arrange in ascending order by distance\n  unvisitedNodes.sort((A, B) => A.distance - B.distance); //remove closestNode from unvisited nodes\n\n  const node = unvisitedNodes.shift();\n  return node;\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const column of grid) {\n    for (const node of column) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}\n\nexport function getShortestPath(endNode) {\n  const shortestPath = [];\n  let currentNode = endNode;\n\n  while (currentNode !== null) {\n    shortestPath.push(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  console.log(shortestPath);\n  return shortestPath;\n}","map":{"version":3,"sources":["C:/Users/Anish/Documents/Projects/pathfinding/src/algorithms/dijkstra.js"],"names":["END_NODE_COL","END_NODE_ROW","dijkstra","grid","startNode","endNode","visitedNodes","distance","unvisitedNodes","getAllNodes","length","currentNode","getClosestNode","neighborList","getNeighbors","isWall","Infinity","isVisited","push","neighbor","previousNode","column","row","sort","A","B","node","shift","nodes","getShortestPath","shortestPath","console","log"],"mappings":"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","sourcesContent":["import { END_NODE_COL, END_NODE_ROW } from \"../constants\";\r\nexport function dijkstra(grid, startNode, endNode) {\r\n  const visitedNodes = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (unvisitedNodes.length > 0) {\r\n    //   start at the start node and susequently get the closest neighbor\r\n    const currentNode = getClosestNode(unvisitedNodes);\r\n    const neighborList = getNeighbors(currentNode, grid);\r\n    if (currentNode.isWall) continue;\r\n    if (currentNode.distance === Infinity) return visitedNodes;\r\n    currentNode.isVisited = true;\r\n    visitedNodes.push(currentNode);\r\n    if (currentNode === endNode) return visitedNodes;\r\n    for (const neighbor of neighborList) {\r\n      neighbor.distance = currentNode.distance + 1;\r\n      neighbor.previousNode = currentNode;\r\n    }\r\n  }\r\n}\r\nfunction getNeighbors(currentNode, grid) {\r\n  const neighborList = [];\r\n  const { column, row } = currentNode;\r\n  if (column > 0) neighborList.push(grid[column - 1][row]);\r\n  if (column < END_NODE_COL) neighborList.push(grid[column + 1][row]);\r\n  if (row > 0) neighborList.push(grid[column][row - 1]);\r\n  if (row < END_NODE_ROW) neighborList.push(grid[column][row + 1]);\r\n  return neighborList;\r\n}\r\n\r\nfunction getClosestNode(unvisitedNodes) {\r\n  //arrange in ascending order by distance\r\n  unvisitedNodes.sort((A, B) => A.distance - B.distance);\r\n  //remove closestNode from unvisited nodes\r\n  const node = unvisitedNodes.shift();\r\n  return node;\r\n}\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const column of grid) {\r\n    for (const node of column) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\nexport function getShortestPath(endNode) {\r\n  const shortestPath = [];\r\n  let currentNode = endNode;\r\n  while (currentNode !== null) {\r\n    shortestPath.push(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  console.log(shortestPath);\r\n  return shortestPath;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}