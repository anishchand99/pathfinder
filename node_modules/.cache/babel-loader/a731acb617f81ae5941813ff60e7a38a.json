{"ast":null,"code":"export function bfs(grid, startNode, endNode) {\n  const visitedNodes = [];\n  let queue = [startNode];\n  let currentNode;\n\n  while (queue.length !== 0) {\n    currentNode = queue.shift();\n    if (currentNode.isWall) continue;\n\n    if (!visitedNodes.includes(currentNode)) {\n      visitedNodes.push(currentNode);\n    }\n\n    if (currentNode === endNode) return visitedNodes;\n    const neighborList = getNeighbors(currentNode, grid);\n\n    for (const node of neighborList) {\n      if (!visitedNodes.includes(node)) {\n        node.previousNode = currentNode;\n        queue.push(node);\n      }\n    }\n\n    if (queue.length == 0) {\n      return visitedNodes;\n    }\n  }\n}\n\nfunction getNeighbors(currentNode, grid) {\n  const neighborList = [];\n  const column = currentNode.column,\n        row = currentNode.row;\n  if (column > 0) neighborList.push(grid[column - 1][row]);\n  if (column < grid.length - 1) neighborList.push(grid[column + 1][row]);\n  if (row > 0) neighborList.push(grid[column][row - 1]);\n  if (row < grid[0].length - 1) neighborList.push(grid[column][row + 1]);\n  return neighborList;\n}","map":{"version":3,"sources":["C:/Users/Anish/Documents/PROJECTS/pathfinding/pathfinder/src/algorithms/bfs.js"],"names":["bfs","grid","startNode","endNode","visitedNodes","queue","currentNode","length","shift","isWall","includes","push","neighborList","getNeighbors","node","previousNode","column","row"],"mappings":"AAAA,OAAO,SAASA,GAAT,CAAaC,IAAb,EAAmBC,SAAnB,EAA8BC,OAA9B,EAAuC;AAC5C,QAAMC,YAAY,GAAG,EAArB;AACA,MAAIC,KAAK,GAAG,CAACH,SAAD,CAAZ;AACA,MAAII,WAAJ;;AACA,SAAOD,KAAK,CAACE,MAAN,KAAiB,CAAxB,EAA2B;AACzBD,IAAAA,WAAW,GAAGD,KAAK,CAACG,KAAN,EAAd;AACA,QAAIF,WAAW,CAACG,MAAhB,EAAwB;;AACxB,QAAI,CAACL,YAAY,CAACM,QAAb,CAAsBJ,WAAtB,CAAL,EAAyC;AACvCF,MAAAA,YAAY,CAACO,IAAb,CAAkBL,WAAlB;AACD;;AACD,QAAIA,WAAW,KAAKH,OAApB,EAA6B,OAAOC,YAAP;AAC7B,UAAMQ,YAAY,GAAGC,YAAY,CAACP,WAAD,EAAcL,IAAd,CAAjC;;AACA,SAAK,MAAMa,IAAX,IAAmBF,YAAnB,EAAiC;AAC/B,UAAI,CAACR,YAAY,CAACM,QAAb,CAAsBI,IAAtB,CAAL,EAAkC;AAChCA,QAAAA,IAAI,CAACC,YAAL,GAAoBT,WAApB;AACAD,QAAAA,KAAK,CAACM,IAAN,CAAWG,IAAX;AACD;AACF;;AACD,QAAIT,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAuB;AACrB,aAAOH,YAAP;AACD;AACF;AACF;;AAED,SAASS,YAAT,CAAsBP,WAAtB,EAAmCL,IAAnC,EAAyC;AACvC,QAAMW,YAAY,GAAG,EAArB;AADuC,QAE/BI,MAF+B,GAEfV,WAFe,CAE/BU,MAF+B;AAAA,QAEvBC,GAFuB,GAEfX,WAFe,CAEvBW,GAFuB;AAGvC,MAAID,MAAM,GAAG,CAAb,EAAgBJ,YAAY,CAACD,IAAb,CAAkBV,IAAI,CAACe,MAAM,GAAG,CAAV,CAAJ,CAAiBC,GAAjB,CAAlB;AAChB,MAAID,MAAM,GAAGf,IAAI,CAACM,MAAL,GAAc,CAA3B,EAA8BK,YAAY,CAACD,IAAb,CAAkBV,IAAI,CAACe,MAAM,GAAG,CAAV,CAAJ,CAAiBC,GAAjB,CAAlB;AAC9B,MAAIA,GAAG,GAAG,CAAV,EAAaL,YAAY,CAACD,IAAb,CAAkBV,IAAI,CAACe,MAAD,CAAJ,CAAaC,GAAG,GAAG,CAAnB,CAAlB;AACb,MAAIA,GAAG,GAAGhB,IAAI,CAAC,CAAD,CAAJ,CAAQM,MAAR,GAAiB,CAA3B,EAA8BK,YAAY,CAACD,IAAb,CAAkBV,IAAI,CAACe,MAAD,CAAJ,CAAaC,GAAG,GAAG,CAAnB,CAAlB;AAC9B,SAAOL,YAAP;AACD","sourcesContent":["export function bfs(grid, startNode, endNode) {\r\n  const visitedNodes = [];\r\n  let queue = [startNode];\r\n  let currentNode;\r\n  while (queue.length !== 0) {\r\n    currentNode = queue.shift();\r\n    if (currentNode.isWall) continue;\r\n    if (!visitedNodes.includes(currentNode)) {\r\n      visitedNodes.push(currentNode);\r\n    }\r\n    if (currentNode === endNode) return visitedNodes;\r\n    const neighborList = getNeighbors(currentNode, grid);\r\n    for (const node of neighborList) {\r\n      if (!visitedNodes.includes(node)) {\r\n        node.previousNode = currentNode;\r\n        queue.push(node);\r\n      }\r\n    }\r\n    if (queue.length == 0) {\r\n      return visitedNodes;\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNeighbors(currentNode, grid) {\r\n  const neighborList = [];\r\n  const { column, row } = currentNode;\r\n  if (column > 0) neighborList.push(grid[column - 1][row]);\r\n  if (column < grid.length - 1) neighborList.push(grid[column + 1][row]);\r\n  if (row > 0) neighborList.push(grid[column][row - 1]);\r\n  if (row < grid[0].length - 1) neighborList.push(grid[column][row + 1]);\r\n  return neighborList;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}