{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anish\\\\Documents\\\\Projects\\\\pathfinding\\\\src\\\\PathFinder\\\\PathFinder.js\";\nimport React, { Component } from \"react\";\nimport Node from \"./Node.js\";\nimport \"./PathFinder.css\";\nimport Navbar from \"./Navbar\";\nimport { dijkstra, getShortestPath } from \"../algorithms/dijkstra\";\nimport { START_NODE_COL, START_NODE_ROW, END_NODE_COL, END_NODE_ROW, GRID_COLS, GRID_ROWS } from \"../constants\";\n\nconst createWallDictionary = () => {\n  let wallDict = new Map();\n\n  for (let i = 0; i < GRID_COLS; i++) {\n    for (let j = 0; j < GRID_ROWS; j++) {\n      wallDict.set(\"\".concat(i, \"-\").concat(j), false);\n    }\n  }\n\n  console.log(wallDict);\n  return wallDict;\n};\n\nlet wallDictionary = createWallDictionary();\nconst initialState = {\n  grid: [],\n  startNodeCol: START_NODE_COL,\n  startNodeRow: START_NODE_ROW,\n  endNodeCol: END_NODE_COL,\n  endNodeRow: END_NODE_ROW,\n  algo: \"dijkstra\",\n  speed: 500,\n  wallDict: wallDictionary\n};\n\nclass PathFinder extends Component {\n  constructor() {\n    super();\n\n    this.selectAlgo = algorithm => {\n      this.setState({\n        algo: algorithm\n      });\n    };\n\n    this.selectSpeed = speedX => {\n      this.setState({\n        speed: speedX\n      });\n    };\n\n    this.makeWall = node => {\n      let updatedWall = this.state.wallDict;\n      updatedWall.set(\"\".concat(node.props.column).concat(node.props.row), true);\n      console.log(this.state.wallDict.get(\"\".concat(node.props.column).concat(node.props.row)), \"\".concat(node.props.column).concat(node.props.row));\n      this.setState({\n        wallDict: updatedWall\n      }, () => {\n        const grid = drawInitialGrid(this.state);\n        this.setState({\n          grid: grid\n        });\n      });\n    };\n\n    this.changeStartNode = node => {\n      this.setState({\n        startNodeCol: node.props.column,\n        startNodeRow: node.props.row\n      }, () => {\n        const grid = drawInitialGrid(this.state);\n        this.setState({\n          grid: grid\n        });\n      });\n    };\n\n    this.changeEndNode = node => {\n      this.setState({\n        endNodeCol: node.props.column,\n        endNodeRow: node.props.row\n      }, () => {\n        const grid = drawInitialGrid(this.state);\n        this.setState({\n          grid: grid\n        });\n      });\n    };\n\n    this.state = initialState;\n  }\n\n  componentDidMount() {\n    const grid = drawInitialGrid(this.state);\n    this.setState({\n      grid: grid\n    });\n  }\n\n  freezeButtons(bool) {\n    let startButton = document.getElementById(\"start\");\n    startButton.disabled = bool;\n    let resetButton = document.getElementById(\"reset\");\n    resetButton.disabled = bool;\n  }\n\n  visualizeAlgorithm() {\n    this.freezeButtons(true);\n    const _this$state = this.state,\n          grid = _this$state.grid,\n          startNodeCol = _this$state.startNodeCol,\n          startNodeRow = _this$state.startNodeRow,\n          endNodeCol = _this$state.endNodeCol,\n          endNodeRow = _this$state.endNodeRow,\n          algo = _this$state.algo;\n    const startNode = grid[startNodeCol][startNodeRow];\n    const endNode = grid[endNodeCol][endNodeRow];\n    let visitedNodes = [];\n\n    if (algo === \"dijkstra\") {\n      visitedNodes = dijkstra(grid, startNode, endNode);\n    }\n\n    const shortestPath = getShortestPath(startNode, endNode);\n    this.removeCSS(visitedNodes, startNode, endNode);\n    this.animateAlgorithm(visitedNodes, startNode, endNode, shortestPath);\n  } //remove the CSS of the nodes after the first use of visualize button\n\n\n  removeCSS(visitedNodes, startNode, endNode) {\n    for (let i = 0; i < visitedNodes.length; i++) {\n      const node = visitedNodes[i];\n\n      if (node !== startNode && node !== endNode) {\n        document.getElementById(\"node-\".concat(node.column, \"-\").concat(node.row)).className = \"node\";\n      }\n    }\n  }\n\n  animateAlgorithm(visitedNodes, startNode, endNode, shortestPath) {\n    const speed = this.state.speed;\n\n    for (let i = 0; i < visitedNodes.length; i++) {\n      if (i === visitedNodes.length - 1) {\n        setTimeout(() => {\n          this.displayShortestPath(shortestPath, startNode, endNode);\n        }, speed * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodes[i];\n\n        if (node !== startNode && node !== endNode) {\n          document.getElementById(\"node-\".concat(node.column, \"-\").concat(node.row)).className = \"node-Visited\";\n        }\n      }, speed * i);\n    }\n  }\n\n  displayShortestPath(shortestPath, startNode, endNode) {\n    for (let i = 0; i < shortestPath.length; i++) {\n      const node = shortestPath[i];\n\n      if (node !== startNode && node !== endNode) {\n        document.getElementById(\"node-\".concat(node.column, \"-\").concat(node.row)).className = \"node-Path\";\n      }\n    }\n\n    this.freezeButtons(false);\n  }\n\n  //reset the CSS animation after the first use\n  resetCSS() {\n    while (document.querySelector(\".node-Visited\") != null) {\n      document.querySelector(\".node-Visited\").className = \"node\";\n    }\n\n    while (document.querySelector(\".node-Path\") != null) {\n      document.querySelector(\".node-Path\").className = \"node\";\n    }\n  }\n\n  render() {\n    const grid = this.state.grid;\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      selectAlgo: this.selectAlgo,\n      selectSpeed: this.selectSpeed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      id: \"start\",\n      onClick: () => this.visualizeAlgorithm(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Visualize!\"), React.createElement(\"button\", {\n      id: \"reset\",\n      onClick: () => this.resetCSS(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Reset!\"), React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, grid.map((row, rowIndex) => {\n      return React.createElement(\"div\", {\n        key: rowIndex,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, row.map((coln, colnIndex) => {\n        const row = coln.row,\n              column = coln.column,\n              isStart = coln.isStart,\n              isFinish = coln.isFinish,\n              isWall = coln.isWall;\n        return React.createElement(Node, {\n          key: colnIndex,\n          row: row,\n          column: column,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          changeStartNode: this.changeStartNode,\n          changeEndNode: this.changeEndNode,\n          makeWall: this.makeWall,\n          resetCSS: this.resetCSS,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        });\n      }));\n    })));\n  }\n\n}\n\nconst drawInitialGrid = state => {\n  const grid = [];\n\n  for (let column = 0; column < GRID_COLS; column++) {\n    let currentColumn = [];\n\n    for (let row = 0; row < GRID_ROWS; row++) {\n      currentColumn.push(createNewNode(row, column, state));\n    }\n\n    grid.push(currentColumn);\n  }\n\n  return grid;\n};\n\nconst createNewNode = (row, column, state) => {\n  const startNodeCol = state.startNodeCol,\n        startNodeRow = state.startNodeRow,\n        endNodeCol = state.endNodeCol,\n        endNodeRow = state.endNodeRow,\n        wallNodeCol = state.wallNodeCol,\n        wallNodeRow = state.wallNodeRow;\n  return {\n    column,\n    row,\n    distance: Infinity,\n    previousNode: null,\n    isVisited: false,\n    isWall: column === wallNodeCol && row === wallNodeRow,\n    isStart: column === startNodeCol && row === startNodeRow,\n    isFinish: column === endNodeCol && row === endNodeRow\n  };\n};\n\nexport default PathFinder; //Try a boolean vs string dicitonary string will be the coln and row and boolean is isWall.","map":{"version":3,"sources":["C:/Users/Anish/Documents/Projects/pathfinding/src/PathFinder/PathFinder.js"],"names":["React","Component","Node","Navbar","dijkstra","getShortestPath","START_NODE_COL","START_NODE_ROW","END_NODE_COL","END_NODE_ROW","GRID_COLS","GRID_ROWS","createWallDictionary","wallDict","Map","i","j","set","console","log","wallDictionary","initialState","grid","startNodeCol","startNodeRow","endNodeCol","endNodeRow","algo","speed","PathFinder","constructor","selectAlgo","algorithm","setState","selectSpeed","speedX","makeWall","node","updatedWall","state","props","column","row","get","drawInitialGrid","changeStartNode","changeEndNode","componentDidMount","freezeButtons","bool","startButton","document","getElementById","disabled","resetButton","visualizeAlgorithm","startNode","endNode","visitedNodes","shortestPath","removeCSS","animateAlgorithm","length","className","setTimeout","displayShortestPath","resetCSS","querySelector","render","map","rowIndex","coln","colnIndex","isStart","isFinish","isWall","currentColumn","push","createNewNode","wallNodeCol","wallNodeRow","distance","Infinity","previousNode","isVisited"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Node from \"./Node.js\";\r\nimport \"./PathFinder.css\";\r\nimport Navbar from \"./Navbar\";\r\nimport { dijkstra, getShortestPath } from \"../algorithms/dijkstra\";\r\nimport {\r\n  START_NODE_COL,\r\n  START_NODE_ROW,\r\n  END_NODE_COL,\r\n  END_NODE_ROW,\r\n  GRID_COLS,\r\n  GRID_ROWS,\r\n} from \"../constants\";\r\nconst createWallDictionary = () => {\r\n  let wallDict = new Map();\r\n  for (let i = 0; i < GRID_COLS; i++) {\r\n    for (let j = 0; j < GRID_ROWS; j++) {\r\n      wallDict.set(`${i}-${j}`, false);\r\n    }\r\n  }\r\n  console.log(wallDict);\r\n  return wallDict;\r\n};\r\n\r\nlet wallDictionary = createWallDictionary();\r\nconst initialState = {\r\n  grid: [],\r\n  startNodeCol: START_NODE_COL,\r\n  startNodeRow: START_NODE_ROW,\r\n  endNodeCol: END_NODE_COL,\r\n  endNodeRow: END_NODE_ROW,\r\n  algo: \"dijkstra\",\r\n  speed: 500,\r\n  wallDict: wallDictionary,\r\n};\r\nclass PathFinder extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = initialState;\r\n  }\r\n  componentDidMount() {\r\n    const grid = drawInitialGrid(this.state);\r\n    this.setState({ grid: grid });\r\n  }\r\n  freezeButtons(bool) {\r\n    let startButton = document.getElementById(\"start\");\r\n    startButton.disabled = bool;\r\n    let resetButton = document.getElementById(\"reset\");\r\n    resetButton.disabled = bool;\r\n  }\r\n  selectAlgo = (algorithm) => {\r\n    this.setState({ algo: algorithm });\r\n  };\r\n  selectSpeed = (speedX) => {\r\n    this.setState({ speed: speedX });\r\n  };\r\n  visualizeAlgorithm() {\r\n    this.freezeButtons(true);\r\n    const {\r\n      grid,\r\n      startNodeCol,\r\n      startNodeRow,\r\n      endNodeCol,\r\n      endNodeRow,\r\n      algo,\r\n    } = this.state;\r\n    const startNode = grid[startNodeCol][startNodeRow];\r\n    const endNode = grid[endNodeCol][endNodeRow];\r\n    let visitedNodes = [];\r\n    if (algo === \"dijkstra\") {\r\n      visitedNodes = dijkstra(grid, startNode, endNode);\r\n    }\r\n    const shortestPath = getShortestPath(startNode, endNode);\r\n    this.removeCSS(visitedNodes, startNode, endNode);\r\n    this.animateAlgorithm(visitedNodes, startNode, endNode, shortestPath);\r\n  }\r\n\r\n  //remove the CSS of the nodes after the first use of visualize button\r\n  removeCSS(visitedNodes, startNode, endNode) {\r\n    for (let i = 0; i < visitedNodes.length; i++) {\r\n      const node = visitedNodes[i];\r\n      if (node !== startNode && node !== endNode) {\r\n        document.getElementById(`node-${node.column}-${node.row}`).className =\r\n          \"node\";\r\n      }\r\n    }\r\n  }\r\n  animateAlgorithm(visitedNodes, startNode, endNode, shortestPath) {\r\n    const { speed } = this.state;\r\n    for (let i = 0; i < visitedNodes.length; i++) {\r\n      if (i === visitedNodes.length - 1) {\r\n        setTimeout(() => {\r\n          this.displayShortestPath(shortestPath, startNode, endNode);\r\n        }, speed * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodes[i];\r\n        if (node !== startNode && node !== endNode) {\r\n          document.getElementById(`node-${node.column}-${node.row}`).className =\r\n            \"node-Visited\";\r\n        }\r\n      }, speed * i);\r\n    }\r\n  }\r\n  displayShortestPath(shortestPath, startNode, endNode) {\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n      const node = shortestPath[i];\r\n      if (node !== startNode && node !== endNode) {\r\n        document.getElementById(`node-${node.column}-${node.row}`).className =\r\n          \"node-Path\";\r\n      }\r\n    }\r\n    this.freezeButtons(false);\r\n  }\r\n  makeWall = (node) => {\r\n    let updatedWall = this.state.wallDict;\r\n    updatedWall.set(`${node.props.column}${node.props.row}`, true);\r\n    console.log(\r\n      this.state.wallDict.get(`${node.props.column}${node.props.row}`),\r\n      `${node.props.column}${node.props.row}`\r\n    );\r\n    this.setState(\r\n      {\r\n        wallDict: updatedWall,\r\n      },\r\n      () => {\r\n        const grid = drawInitialGrid(this.state);\r\n        this.setState({ grid: grid });\r\n      }\r\n    );\r\n  };\r\n  changeStartNode = (node) => {\r\n    this.setState(\r\n      {\r\n        startNodeCol: node.props.column,\r\n        startNodeRow: node.props.row,\r\n      },\r\n      () => {\r\n        const grid = drawInitialGrid(this.state);\r\n        this.setState({ grid: grid });\r\n      }\r\n    );\r\n  };\r\n  changeEndNode = (node) => {\r\n    this.setState(\r\n      {\r\n        endNodeCol: node.props.column,\r\n        endNodeRow: node.props.row,\r\n      },\r\n      () => {\r\n        const grid = drawInitialGrid(this.state);\r\n        this.setState({ grid: grid });\r\n      }\r\n    );\r\n  };\r\n\r\n  //reset the CSS animation after the first use\r\n  resetCSS() {\r\n    while (document.querySelector(`.node-Visited`) != null) {\r\n      document.querySelector(`.node-Visited`).className = \"node\";\r\n    }\r\n    while (document.querySelector(`.node-Path`) != null) {\r\n      document.querySelector(`.node-Path`).className = \"node\";\r\n    }\r\n  }\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <Navbar\r\n          selectAlgo={this.selectAlgo}\r\n          selectSpeed={this.selectSpeed}\r\n        ></Navbar>\r\n        <button id=\"start\" onClick={() => this.visualizeAlgorithm()}>\r\n          Visualize!\r\n        </button>\r\n        <button id=\"reset\" onClick={() => this.resetCSS()}>\r\n          Reset!\r\n        </button>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIndex) => {\r\n            return (\r\n              <div key={rowIndex}>\r\n                {row.map((coln, colnIndex) => {\r\n                  const { row, column, isStart, isFinish, isWall } = coln;\r\n                  return (\r\n                    <Node\r\n                      key={colnIndex}\r\n                      row={row}\r\n                      column={column}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      changeStartNode={this.changeStartNode}\r\n                      changeEndNode={this.changeEndNode}\r\n                      makeWall={this.makeWall}\r\n                      resetCSS={this.resetCSS}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst drawInitialGrid = (state) => {\r\n  const grid = [];\r\n  for (let column = 0; column < GRID_COLS; column++) {\r\n    let currentColumn = [];\r\n    for (let row = 0; row < GRID_ROWS; row++) {\r\n      currentColumn.push(createNewNode(row, column, state));\r\n    }\r\n    grid.push(currentColumn);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNewNode = (row, column, state) => {\r\n  const {\r\n    startNodeCol,\r\n    startNodeRow,\r\n    endNodeCol,\r\n    endNodeRow,\r\n    wallNodeCol,\r\n    wallNodeRow,\r\n  } = state;\r\n  return {\r\n    column,\r\n    row,\r\n    distance: Infinity,\r\n    previousNode: null,\r\n    isVisited: false,\r\n    isWall: column === wallNodeCol && row === wallNodeRow,\r\n    isStart: column === startNodeCol && row === startNodeRow,\r\n    isFinish: column === endNodeCol && row === endNodeRow,\r\n  };\r\n};\r\n\r\nexport default PathFinder;\r\n\r\n//Try a boolean vs string dicitonary string will be the coln and row and boolean is isWall.\r\n"]},"metadata":{},"sourceType":"module"}