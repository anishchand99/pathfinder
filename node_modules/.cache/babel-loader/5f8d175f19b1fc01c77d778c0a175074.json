{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anish\\\\Documents\\\\Projects\\\\pathfinding\\\\src\\\\PathFinder\\\\PathFinder.js\";\nimport React, { Component } from \"react\";\nimport Node from \"./Node.js\";\nimport \"./PathFinder.css\";\nimport Navbar from \"./Navbar\";\nimport { dijkstra, getShortestPath } from \"../algorithms/dijkstra\";\nimport { START_NODE_COL, START_NODE_ROW, END_NODE_COL, END_NODE_ROW } from \"../constants\";\nconst wallDictionary = createWallDicitonary();\nconst initialState = {\n  grid: [],\n  startNodeCol: START_NODE_COL,\n  startNodeRow: START_NODE_ROW,\n  endNodeCol: END_NODE_COL,\n  endNodeRow: END_NODE_ROW,\n  algo: \"dijkstra\",\n  speed: 500\n};\n\nconst createWallDictionary = () => {\n  wallDict = {};\n  return wallDict;\n};\n\nclass PathFinder extends Component {\n  constructor() {\n    super();\n\n    this.selectAlgo = algorithm => {\n      this.setState({\n        algo: algorithm\n      });\n    };\n\n    this.selectSpeed = speedX => {\n      this.setState({\n        speed: speedX\n      });\n    };\n\n    this.makeWall = (event, node) => {\n      this.setState({\n        wallNodeCol: node.props.column,\n        wallNodeRow: node.props.row\n      }, () => {\n        console.log(this.state.wallNodeCol, this.state.wallNodeRow);\n        const grid = drawInitialGrid(this.state);\n        this.setState({\n          grid: grid\n        });\n      });\n    };\n\n    this.changeStartNode = node => {\n      this.setState({\n        startNodeCol: node.props.column,\n        startNodeRow: node.props.row\n      }, () => {\n        const grid = drawInitialGrid(this.state);\n        this.setState({\n          grid: grid\n        });\n      });\n    };\n\n    this.changeEndNode = node => {\n      this.setState({\n        endNodeCol: node.props.column,\n        endNodeRow: node.props.row\n      }, () => {\n        const grid = drawInitialGrid(this.state);\n        this.setState({\n          grid: grid\n        });\n      });\n    };\n\n    this.state = initialState;\n  }\n\n  componentDidMount() {\n    const grid = drawInitialGrid(this.state);\n    this.setState({\n      grid: grid\n    });\n  }\n\n  freezeButtons(bool) {\n    let startButton = document.getElementById(\"start\");\n    startButton.disabled = bool;\n    let resetButton = document.getElementById(\"reset\");\n    resetButton.disabled = bool;\n  }\n\n  visualizeAlgorithm() {\n    this.freezeButtons(true);\n    const _this$state = this.state,\n          grid = _this$state.grid,\n          startNodeCol = _this$state.startNodeCol,\n          startNodeRow = _this$state.startNodeRow,\n          endNodeCol = _this$state.endNodeCol,\n          endNodeRow = _this$state.endNodeRow,\n          wallNodeCol = _this$state.wallNodeCol,\n          wallNodeRow = _this$state.wallNodeRow,\n          algo = _this$state.algo;\n    const startNode = grid[startNodeCol][startNodeRow];\n    const endNode = grid[endNodeCol][endNodeRow];\n    let visitedNodes = [];\n\n    if (algo === \"dijkstra\") {\n      visitedNodes = dijkstra(grid, startNode, endNode);\n    }\n\n    const shortestPath = getShortestPath(startNode, endNode);\n    this.removeCSS(visitedNodes, startNode, endNode);\n    this.animateAlgorithm(visitedNodes, startNode, endNode, shortestPath);\n  } //remove the CSS of the nodes after the first use of visualize button\n\n\n  removeCSS(visitedNodes, startNode, endNode) {\n    for (let i = 0; i < visitedNodes.length; i++) {\n      const node = visitedNodes[i];\n\n      if (node !== startNode && node !== endNode) {\n        document.getElementById(\"node-\".concat(node.column, \"-\").concat(node.row)).className = \"node\";\n      }\n    }\n  }\n\n  animateAlgorithm(visitedNodes, startNode, endNode, shortestPath) {\n    const speed = this.state.speed;\n\n    for (let i = 0; i < visitedNodes.length; i++) {\n      if (i === visitedNodes.length - 1) {\n        setTimeout(() => {\n          this.displayShortestPath(shortestPath, startNode, endNode);\n        }, speed * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodes[i];\n\n        if (node !== startNode && node !== endNode) {\n          document.getElementById(\"node-\".concat(node.column, \"-\").concat(node.row)).className = \"node-Visited\";\n        }\n      }, speed * i);\n    }\n  }\n\n  displayShortestPath(shortestPath, startNode, endNode) {\n    for (let i = 0; i < shortestPath.length; i++) {\n      const node = shortestPath[i];\n\n      if (node !== startNode && node !== endNode) {\n        document.getElementById(\"node-\".concat(node.column, \"-\").concat(node.row)).className = \"node-Path\";\n      }\n    }\n\n    this.freezeButtons(false);\n  }\n\n  //reset the CSS animation after the first use\n  resetCSS() {\n    while (document.querySelector(\".node-Visited\") != null) {\n      document.querySelector(\".node-Visited\").className = \"node\";\n    }\n\n    while (document.querySelector(\".node-Path\") != null) {\n      document.querySelector(\".node-Path\").className = \"node\";\n    }\n  }\n\n  render() {\n    const grid = this.state.grid;\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      selectAlgo: this.selectAlgo,\n      selectSpeed: this.selectSpeed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      id: \"start\",\n      onClick: () => this.visualizeAlgorithm(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"Visualize!\"), React.createElement(\"button\", {\n      id: \"reset\",\n      onClick: () => this.resetCSS(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Reset!\"), React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, grid.map((row, rowIndex) => {\n      return React.createElement(\"div\", {\n        key: rowIndex,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, row.map((coln, colnIndex) => {\n        const row = coln.row,\n              column = coln.column,\n              isStart = coln.isStart,\n              isFinish = coln.isFinish,\n              isWall = coln.isWall;\n        return React.createElement(Node, {\n          key: colnIndex,\n          row: row,\n          column: column,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          changeStartNode: this.changeStartNode,\n          changeEndNode: this.changeEndNode,\n          makeWall: this.makeWall,\n          resetCSS: this.resetCSS,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        });\n      }));\n    })));\n  }\n\n}\n\nconst drawInitialGrid = state => {\n  const grid = [];\n\n  for (let column = 0; column < 50; column++) {\n    let currentColumn = [];\n\n    for (let row = 0; row < 20; row++) {\n      currentColumn.push(createNewNode(row, column, state));\n    }\n\n    grid.push(currentColumn);\n  }\n\n  return grid;\n};\n\nconst createNewNode = (row, column, state) => {\n  const startNodeCol = state.startNodeCol,\n        startNodeRow = state.startNodeRow,\n        endNodeCol = state.endNodeCol,\n        endNodeRow = state.endNodeRow,\n        wallNodeCol = state.wallNodeCol,\n        wallNodeRow = state.wallNodeRow;\n  return {\n    column,\n    row,\n    distance: Infinity,\n    previousNode: null,\n    isVisited: false,\n    isWall: column === wallNodeCol && row === wallNodeRow,\n    isStart: column === startNodeCol && row === startNodeRow,\n    isFinish: column === endNodeCol && row === endNodeRow\n  };\n};\n\nexport default PathFinder; //Try a boolean vs string dicitonary string will be the coln and row and boolean is isWall.","map":{"version":3,"sources":["C:/Users/Anish/Documents/Projects/pathfinding/src/PathFinder/PathFinder.js"],"names":["React","Component","Node","Navbar","dijkstra","getShortestPath","START_NODE_COL","START_NODE_ROW","END_NODE_COL","END_NODE_ROW","wallDictionary","createWallDicitonary","initialState","grid","startNodeCol","startNodeRow","endNodeCol","endNodeRow","algo","speed","createWallDictionary","wallDict","PathFinder","constructor","selectAlgo","algorithm","setState","selectSpeed","speedX","makeWall","event","node","wallNodeCol","props","column","wallNodeRow","row","console","log","state","drawInitialGrid","changeStartNode","changeEndNode","componentDidMount","freezeButtons","bool","startButton","document","getElementById","disabled","resetButton","visualizeAlgorithm","startNode","endNode","visitedNodes","shortestPath","removeCSS","animateAlgorithm","i","length","className","setTimeout","displayShortestPath","resetCSS","querySelector","render","map","rowIndex","coln","colnIndex","isStart","isFinish","isWall","currentColumn","push","createNewNode","distance","Infinity","previousNode","isVisited"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Node from \"./Node.js\";\r\nimport \"./PathFinder.css\";\r\nimport Navbar from \"./Navbar\";\r\nimport { dijkstra, getShortestPath } from \"../algorithms/dijkstra\";\r\nimport {\r\n  START_NODE_COL,\r\n  START_NODE_ROW,\r\n  END_NODE_COL,\r\n  END_NODE_ROW,\r\n} from \"../constants\";\r\nconst wallDictionary = createWallDicitonary();\r\nconst initialState = {\r\n  grid: [],\r\n  startNodeCol: START_NODE_COL,\r\n  startNodeRow: START_NODE_ROW,\r\n  endNodeCol: END_NODE_COL,\r\n  endNodeRow: END_NODE_ROW,\r\n  algo: \"dijkstra\",\r\n  speed: 500,\r\n};\r\nconst createWallDictionary = () => {\r\n  wallDict = {};\r\n  return wallDict;\r\n};\r\nclass PathFinder extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = initialState;\r\n  }\r\n  componentDidMount() {\r\n    const grid = drawInitialGrid(this.state);\r\n    this.setState({ grid: grid });\r\n  }\r\n  freezeButtons(bool) {\r\n    let startButton = document.getElementById(\"start\");\r\n    startButton.disabled = bool;\r\n    let resetButton = document.getElementById(\"reset\");\r\n    resetButton.disabled = bool;\r\n  }\r\n  selectAlgo = (algorithm) => {\r\n    this.setState({ algo: algorithm });\r\n  };\r\n  selectSpeed = (speedX) => {\r\n    this.setState({ speed: speedX });\r\n  };\r\n  visualizeAlgorithm() {\r\n    this.freezeButtons(true);\r\n    const {\r\n      grid,\r\n      startNodeCol,\r\n      startNodeRow,\r\n      endNodeCol,\r\n      endNodeRow,\r\n      wallNodeCol,\r\n      wallNodeRow,\r\n      algo,\r\n    } = this.state;\r\n    const startNode = grid[startNodeCol][startNodeRow];\r\n    const endNode = grid[endNodeCol][endNodeRow];\r\n    let visitedNodes = [];\r\n    if (algo === \"dijkstra\") {\r\n      visitedNodes = dijkstra(grid, startNode, endNode);\r\n    }\r\n    const shortestPath = getShortestPath(startNode, endNode);\r\n    this.removeCSS(visitedNodes, startNode, endNode);\r\n    this.animateAlgorithm(visitedNodes, startNode, endNode, shortestPath);\r\n  }\r\n\r\n  //remove the CSS of the nodes after the first use of visualize button\r\n  removeCSS(visitedNodes, startNode, endNode) {\r\n    for (let i = 0; i < visitedNodes.length; i++) {\r\n      const node = visitedNodes[i];\r\n      if (node !== startNode && node !== endNode) {\r\n        document.getElementById(`node-${node.column}-${node.row}`).className =\r\n          \"node\";\r\n      }\r\n    }\r\n  }\r\n  animateAlgorithm(visitedNodes, startNode, endNode, shortestPath) {\r\n    const { speed } = this.state;\r\n    for (let i = 0; i < visitedNodes.length; i++) {\r\n      if (i === visitedNodes.length - 1) {\r\n        setTimeout(() => {\r\n          this.displayShortestPath(shortestPath, startNode, endNode);\r\n        }, speed * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodes[i];\r\n        if (node !== startNode && node !== endNode) {\r\n          document.getElementById(`node-${node.column}-${node.row}`).className =\r\n            \"node-Visited\";\r\n        }\r\n      }, speed * i);\r\n    }\r\n  }\r\n  displayShortestPath(shortestPath, startNode, endNode) {\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n      const node = shortestPath[i];\r\n      if (node !== startNode && node !== endNode) {\r\n        document.getElementById(`node-${node.column}-${node.row}`).className =\r\n          \"node-Path\";\r\n      }\r\n    }\r\n    this.freezeButtons(false);\r\n  }\r\n  makeWall = (event, node) => {\r\n    this.setState(\r\n      {\r\n        wallNodeCol: node.props.column,\r\n        wallNodeRow: node.props.row,\r\n      },\r\n      () => {\r\n        console.log(this.state.wallNodeCol, this.state.wallNodeRow);\r\n        const grid = drawInitialGrid(this.state);\r\n        this.setState({ grid: grid });\r\n      }\r\n    );\r\n  };\r\n  changeStartNode = (node) => {\r\n    this.setState(\r\n      {\r\n        startNodeCol: node.props.column,\r\n        startNodeRow: node.props.row,\r\n      },\r\n      () => {\r\n        const grid = drawInitialGrid(this.state);\r\n        this.setState({ grid: grid });\r\n      }\r\n    );\r\n  };\r\n  changeEndNode = (node) => {\r\n    this.setState(\r\n      {\r\n        endNodeCol: node.props.column,\r\n        endNodeRow: node.props.row,\r\n      },\r\n      () => {\r\n        const grid = drawInitialGrid(this.state);\r\n        this.setState({ grid: grid });\r\n      }\r\n    );\r\n  };\r\n\r\n  //reset the CSS animation after the first use\r\n  resetCSS() {\r\n    while (document.querySelector(`.node-Visited`) != null) {\r\n      document.querySelector(`.node-Visited`).className = \"node\";\r\n    }\r\n    while (document.querySelector(`.node-Path`) != null) {\r\n      document.querySelector(`.node-Path`).className = \"node\";\r\n    }\r\n  }\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <Navbar\r\n          selectAlgo={this.selectAlgo}\r\n          selectSpeed={this.selectSpeed}\r\n        ></Navbar>\r\n        <button id=\"start\" onClick={() => this.visualizeAlgorithm()}>\r\n          Visualize!\r\n        </button>\r\n        <button id=\"reset\" onClick={() => this.resetCSS()}>\r\n          Reset!\r\n        </button>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIndex) => {\r\n            return (\r\n              <div key={rowIndex}>\r\n                {row.map((coln, colnIndex) => {\r\n                  const { row, column, isStart, isFinish, isWall } = coln;\r\n                  return (\r\n                    <Node\r\n                      key={colnIndex}\r\n                      row={row}\r\n                      column={column}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      changeStartNode={this.changeStartNode}\r\n                      changeEndNode={this.changeEndNode}\r\n                      makeWall={this.makeWall}\r\n                      resetCSS={this.resetCSS}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst drawInitialGrid = (state) => {\r\n  const grid = [];\r\n  for (let column = 0; column < 50; column++) {\r\n    let currentColumn = [];\r\n    for (let row = 0; row < 20; row++) {\r\n      currentColumn.push(createNewNode(row, column, state));\r\n    }\r\n    grid.push(currentColumn);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNewNode = (row, column, state) => {\r\n  const {\r\n    startNodeCol,\r\n    startNodeRow,\r\n    endNodeCol,\r\n    endNodeRow,\r\n    wallNodeCol,\r\n    wallNodeRow,\r\n  } = state;\r\n  return {\r\n    column,\r\n    row,\r\n    distance: Infinity,\r\n    previousNode: null,\r\n    isVisited: false,\r\n    isWall: column === wallNodeCol && row === wallNodeRow,\r\n    isStart: column === startNodeCol && row === startNodeRow,\r\n    isFinish: column === endNodeCol && row === endNodeRow,\r\n  };\r\n};\r\n\r\nexport default PathFinder;\r\n\r\n//Try a boolean vs string dicitonary string will be the coln and row and boolean is isWall.\r\n"]},"metadata":{},"sourceType":"module"}