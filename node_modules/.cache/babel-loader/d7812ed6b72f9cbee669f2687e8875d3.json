{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anish\\\\Documents\\\\Projects\\\\pathfinding\\\\src\\\\PathFinder\\\\PathFinder.js\";\nimport React, { Component } from \"react\";\nimport Node from \"./Node.js\";\nimport \"./PathFinder.css\";\nimport Navbar from \"./Navbar\";\nimport { dijkstra, getShortestPath } from \"../algorithms/dijkstra\";\nimport { START_NODE_COL, START_NODE_ROW, END_NODE_COL, END_NODE_ROW } from \"../constants\";\nconst initialState = {\n  grid: [],\n  startNodeCol: START_NODE_COL,\n  startNodeRow: START_NODE_ROW,\n  endNodeCol: END_NODE_COL,\n  endNodeRow: END_NODE_ROW,\n  algo: \"dijkstra\",\n  speed: 500\n};\n\nclass PathFinder extends Component {\n  constructor() {\n    super();\n\n    this.selectAlgo = algorithm => {\n      this.setState({\n        algo: algorithm\n      });\n    };\n\n    this.selectSpeed = speedX => {\n      this.setState({\n        speed: speedX\n      });\n    };\n\n    this.makeWall = (event, node) => {\n      console.log(event.which);\n      this.setState({\n        wallNodeCol: node.props.column,\n        wallNodeRow: node.props.row\n      }, () => {\n        console.log(this.state.wallNodeCol, this.state.wallNodeRow);\n        const grid = drawInitialGrid(this.state);\n        this.setState({\n          grid: grid\n        });\n      });\n    };\n\n    this.changeStartNode = node => {\n      this.setState({\n        startNodeCol: node.props.column,\n        startNodeRow: node.props.row\n      }, () => {\n        const grid = drawInitialGrid(this.state);\n        this.setState({\n          grid: grid\n        });\n      });\n    };\n\n    this.changeEndNode = node => {\n      this.setState({\n        endNodeCol: node.props.column,\n        endNodeRow: node.props.row\n      }, () => {\n        const grid = drawInitialGrid(this.state);\n        this.setState({\n          grid: grid\n        });\n      });\n    };\n\n    this.state = initialState;\n  }\n\n  componentDidMount() {\n    const grid = drawInitialGrid(this.state);\n    this.setState({\n      grid: grid\n    });\n  }\n\n  freezeButtons(bool) {\n    let startButton = document.getElementById(\"start\");\n    startButton.disabled = bool;\n    let resetButton = document.getElementById(\"reset\");\n    resetButton.disabled = bool;\n  }\n\n  visualizeAlgorithm() {\n    this.freezeButtons(true);\n    const _this$state = this.state,\n          grid = _this$state.grid,\n          startNodeCol = _this$state.startNodeCol,\n          startNodeRow = _this$state.startNodeRow,\n          endNodeCol = _this$state.endNodeCol,\n          endNodeRow = _this$state.endNodeRow,\n          wallNodeCol = _this$state.wallNodeCol,\n          wallNodeRow = _this$state.wallNodeRow,\n          algo = _this$state.algo;\n    const startNode = grid[startNodeCol][startNodeRow];\n    const endNode = grid[endNodeCol][endNodeRow];\n    let visitedNodes = [];\n\n    if (algo === \"dijkstra\") {\n      visitedNodes = dijkstra(grid, startNode, endNode);\n    }\n\n    const shortestPath = getShortestPath(startNode, endNode);\n    this.removeCSS(visitedNodes, startNode, endNode);\n    this.animateAlgorithm(visitedNodes, startNode, endNode, shortestPath);\n  } //remove the CSS of the nodes after the first use of visualize button\n\n\n  removeCSS(visitedNodes, startNode, endNode) {\n    for (let i = 0; i < visitedNodes.length; i++) {\n      const node = visitedNodes[i];\n\n      if (node !== startNode && node !== endNode) {\n        document.getElementById(\"node-\".concat(node.column, \"-\").concat(node.row)).className = \"node\";\n      }\n    }\n  }\n\n  animateAlgorithm(visitedNodes, startNode, endNode, shortestPath) {\n    const speed = this.state.speed;\n\n    for (let i = 0; i < visitedNodes.length; i++) {\n      if (i === visitedNodes.length - 1) {\n        setTimeout(() => {\n          this.displayShortestPath(shortestPath, startNode, endNode);\n        }, speed * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodes[i];\n\n        if (node !== startNode && node !== endNode) {\n          document.getElementById(\"node-\".concat(node.column, \"-\").concat(node.row)).className = \"node-Visited\";\n        }\n      }, speed * i);\n    }\n  }\n\n  displayShortestPath(shortestPath, startNode, endNode) {\n    for (let i = 0; i < shortestPath.length; i++) {\n      const node = shortestPath[i];\n\n      if (node !== startNode && node !== endNode) {\n        document.getElementById(\"node-\".concat(node.column, \"-\").concat(node.row)).className = \"node-Path\";\n      }\n    }\n\n    this.freezeButtons(false);\n  }\n\n  //reset the CSS animation after the first use\n  resetCSS() {\n    while (document.querySelector(\".node-Visited\") != null) {\n      document.querySelector(\".node-Visited\").className = \"node\";\n    }\n\n    while (document.querySelector(\".node-Path\") != null) {\n      document.querySelector(\".node-Path\").className = \"node\";\n    }\n  }\n\n  render() {\n    const grid = this.state.grid;\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      selectAlgo: this.selectAlgo,\n      selectSpeed: this.selectSpeed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      id: \"start\",\n      onClick: () => this.visualizeAlgorithm(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Visualize!\"), React.createElement(\"button\", {\n      id: \"reset\",\n      onClick: () => this.resetCSS(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Reset!\"), React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, grid.map((row, rowIndex) => {\n      return React.createElement(\"div\", {\n        key: rowIndex,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, row.map((coln, colnIndex) => {\n        const row = coln.row,\n              column = coln.column,\n              isStart = coln.isStart,\n              isFinish = coln.isFinish,\n              isWall = coln.isWall;\n        return React.createElement(Node, {\n          key: colnIndex,\n          row: row,\n          column: column,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          changeStartNode: this.changeStartNode,\n          changeEndNode: this.changeEndNode,\n          makeWall: this.makeWall,\n          resetCSS: this.resetCSS,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        });\n      }));\n    })));\n  }\n\n}\n\nconst drawInitialGrid = state => {\n  const grid = [];\n\n  for (let column = 0; column < 50; column++) {\n    let currentColumn = [];\n\n    for (let row = 0; row < 20; row++) {\n      currentColumn.push(createNewNode(row, column, state));\n    }\n\n    grid.push(currentColumn);\n  }\n\n  return grid;\n};\n\nconst createNewNode = (row, column, state) => {\n  const startNodeCol = state.startNodeCol,\n        startNodeRow = state.startNodeRow,\n        endNodeCol = state.endNodeCol,\n        endNodeRow = state.endNodeRow;\n  return {\n    column,\n    row,\n    distance: Infinity,\n    previousNode: null,\n    isVisited: false,\n    isWall: false,\n    isStart: column === startNodeCol && row === startNodeRow,\n    isFinish: column === endNodeCol && row === endNodeRow\n  };\n};\n\nexport default PathFinder;","map":{"version":3,"sources":["C:/Users/Anish/Documents/Projects/pathfinding/src/PathFinder/PathFinder.js"],"names":["React","Component","Node","Navbar","dijkstra","getShortestPath","START_NODE_COL","START_NODE_ROW","END_NODE_COL","END_NODE_ROW","initialState","grid","startNodeCol","startNodeRow","endNodeCol","endNodeRow","algo","speed","PathFinder","constructor","selectAlgo","algorithm","setState","selectSpeed","speedX","makeWall","event","node","console","log","which","wallNodeCol","props","column","wallNodeRow","row","state","drawInitialGrid","changeStartNode","changeEndNode","componentDidMount","freezeButtons","bool","startButton","document","getElementById","disabled","resetButton","visualizeAlgorithm","startNode","endNode","visitedNodes","shortestPath","removeCSS","animateAlgorithm","i","length","className","setTimeout","displayShortestPath","resetCSS","querySelector","render","map","rowIndex","coln","colnIndex","isStart","isFinish","isWall","currentColumn","push","createNewNode","distance","Infinity","previousNode","isVisited"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Node from \"./Node.js\";\r\nimport \"./PathFinder.css\";\r\nimport Navbar from \"./Navbar\";\r\nimport { dijkstra, getShortestPath } from \"../algorithms/dijkstra\";\r\nimport {\r\n  START_NODE_COL,\r\n  START_NODE_ROW,\r\n  END_NODE_COL,\r\n  END_NODE_ROW,\r\n} from \"../constants\";\r\nconst initialState = {\r\n  grid: [],\r\n  startNodeCol: START_NODE_COL,\r\n  startNodeRow: START_NODE_ROW,\r\n  endNodeCol: END_NODE_COL,\r\n  endNodeRow: END_NODE_ROW,\r\n  algo: \"dijkstra\",\r\n  speed: 500,\r\n};\r\nclass PathFinder extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = initialState;\r\n  }\r\n  componentDidMount() {\r\n    const grid = drawInitialGrid(this.state);\r\n    this.setState({ grid: grid });\r\n  }\r\n  freezeButtons(bool) {\r\n    let startButton = document.getElementById(\"start\");\r\n    startButton.disabled = bool;\r\n    let resetButton = document.getElementById(\"reset\");\r\n    resetButton.disabled = bool;\r\n  }\r\n  selectAlgo = (algorithm) => {\r\n    this.setState({ algo: algorithm });\r\n  };\r\n  selectSpeed = (speedX) => {\r\n    this.setState({ speed: speedX });\r\n  };\r\n  visualizeAlgorithm() {\r\n    this.freezeButtons(true);\r\n    const {\r\n      grid,\r\n      startNodeCol,\r\n      startNodeRow,\r\n      endNodeCol,\r\n      endNodeRow,\r\n      wallNodeCol,\r\n      wallNodeRow,\r\n      algo,\r\n    } = this.state;\r\n    const startNode = grid[startNodeCol][startNodeRow];\r\n    const endNode = grid[endNodeCol][endNodeRow];\r\n    let visitedNodes = [];\r\n    if (algo === \"dijkstra\") {\r\n      visitedNodes = dijkstra(grid, startNode, endNode);\r\n    }\r\n    const shortestPath = getShortestPath(startNode, endNode);\r\n    this.removeCSS(visitedNodes, startNode, endNode);\r\n    this.animateAlgorithm(visitedNodes, startNode, endNode, shortestPath);\r\n  }\r\n\r\n  //remove the CSS of the nodes after the first use of visualize button\r\n  removeCSS(visitedNodes, startNode, endNode) {\r\n    for (let i = 0; i < visitedNodes.length; i++) {\r\n      const node = visitedNodes[i];\r\n      if (node !== startNode && node !== endNode) {\r\n        document.getElementById(`node-${node.column}-${node.row}`).className =\r\n          \"node\";\r\n      }\r\n    }\r\n  }\r\n  animateAlgorithm(visitedNodes, startNode, endNode, shortestPath) {\r\n    const { speed } = this.state;\r\n    for (let i = 0; i < visitedNodes.length; i++) {\r\n      if (i === visitedNodes.length - 1) {\r\n        setTimeout(() => {\r\n          this.displayShortestPath(shortestPath, startNode, endNode);\r\n        }, speed * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodes[i];\r\n        if (node !== startNode && node !== endNode) {\r\n          document.getElementById(`node-${node.column}-${node.row}`).className =\r\n            \"node-Visited\";\r\n        }\r\n      }, speed * i);\r\n    }\r\n  }\r\n  displayShortestPath(shortestPath, startNode, endNode) {\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n      const node = shortestPath[i];\r\n      if (node !== startNode && node !== endNode) {\r\n        document.getElementById(`node-${node.column}-${node.row}`).className =\r\n          \"node-Path\";\r\n      }\r\n    }\r\n    this.freezeButtons(false);\r\n  }\r\n  makeWall = (event, node) => {\r\n    console.log(event.which);\r\n    this.setState(\r\n      {\r\n        wallNodeCol: node.props.column,\r\n        wallNodeRow: node.props.row,\r\n      },\r\n      () => {\r\n        console.log(this.state.wallNodeCol, this.state.wallNodeRow);\r\n        const grid = drawInitialGrid(this.state);\r\n        this.setState({ grid: grid });\r\n      }\r\n    );\r\n  };\r\n  changeStartNode = (node) => {\r\n    this.setState(\r\n      {\r\n        startNodeCol: node.props.column,\r\n        startNodeRow: node.props.row,\r\n      },\r\n      () => {\r\n        const grid = drawInitialGrid(this.state);\r\n        this.setState({ grid: grid });\r\n      }\r\n    );\r\n  };\r\n  changeEndNode = (node) => {\r\n    this.setState(\r\n      {\r\n        endNodeCol: node.props.column,\r\n        endNodeRow: node.props.row,\r\n      },\r\n      () => {\r\n        const grid = drawInitialGrid(this.state);\r\n        this.setState({ grid: grid });\r\n      }\r\n    );\r\n  };\r\n\r\n  //reset the CSS animation after the first use\r\n  resetCSS() {\r\n    while (document.querySelector(`.node-Visited`) != null) {\r\n      document.querySelector(`.node-Visited`).className = \"node\";\r\n    }\r\n    while (document.querySelector(`.node-Path`) != null) {\r\n      document.querySelector(`.node-Path`).className = \"node\";\r\n    }\r\n  }\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <Navbar\r\n          selectAlgo={this.selectAlgo}\r\n          selectSpeed={this.selectSpeed}\r\n        ></Navbar>\r\n        <button id=\"start\" onClick={() => this.visualizeAlgorithm()}>\r\n          Visualize!\r\n        </button>\r\n        <button id=\"reset\" onClick={() => this.resetCSS()}>\r\n          Reset!\r\n        </button>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIndex) => {\r\n            return (\r\n              <div key={rowIndex}>\r\n                {row.map((coln, colnIndex) => {\r\n                  const { row, column, isStart, isFinish, isWall } = coln;\r\n                  return (\r\n                    <Node\r\n                      key={colnIndex}\r\n                      row={row}\r\n                      column={column}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      changeStartNode={this.changeStartNode}\r\n                      changeEndNode={this.changeEndNode}\r\n                      makeWall={this.makeWall}\r\n                      resetCSS={this.resetCSS}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst drawInitialGrid = (state) => {\r\n  const grid = [];\r\n  for (let column = 0; column < 50; column++) {\r\n    let currentColumn = [];\r\n    for (let row = 0; row < 20; row++) {\r\n      currentColumn.push(createNewNode(row, column, state));\r\n    }\r\n    grid.push(currentColumn);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNewNode = (row, column, state) => {\r\n  const { startNodeCol, startNodeRow, endNodeCol, endNodeRow } = state;\r\n  return {\r\n    column,\r\n    row,\r\n    distance: Infinity,\r\n    previousNode: null,\r\n    isVisited: false,\r\n    isWall: false,\r\n    isStart: column === startNodeCol && row === startNodeRow,\r\n    isFinish: column === endNodeCol && row === endNodeRow,\r\n  };\r\n};\r\n\r\nexport default PathFinder;\r\n"]},"metadata":{},"sourceType":"module"}