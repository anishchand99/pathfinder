{"ast":null,"code":"import { END_NODE_COL, END_NODE_ROW } from \"../constants\";\nexport function dijkstra(grid, startNode, endNode) {\n  const visitedNodes = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (unvisitedNodes.length > 0) {\n    //   start at the start node and susequently get the closest neighbor\n    const currentNode = getClosestNode(unvisitedNodes);\n    console.log(currentNode);\n    const neighborList = getNeighbors(currentNode, grid);\n    console.log(neighborList);\n    if (currentNode.isWall) continue;\n\n    for (const neighbor of neighborList) {\n      neighbor.distance = currentNode.distance + 1;\n      neighbor.previousNode = currentNode;\n    }\n  }\n}\n\nfunction getNeighbors(currentNode, grid) {\n  const neighborList = [];\n  const column = currentNode.column,\n        row = currentNode.row;\n  if (column > 0) neighborList.push(grid[column - 1][row]);\n  if (column < END_NODE_COL) neighborList.push(grid[column + 1][row]);\n  if (row > 0) neighborList.push(grid[column][row - 1]);\n  if (row < END_NODE_ROW) neighborList.push(grid[column][row + 1]);\n  return neighborList;\n}\n\nfunction getClosestNode(unvisitedNodes) {\n  //arrange in ascending order by distance\n  unvisitedNodes.sort((A, B) => A.distance - B.distance); //remove closestNode from unvisited nodes\n\n  const node = unvisitedNodes.shift();\n  return node;\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const column of grid) {\n    for (const node of column) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}","map":{"version":3,"sources":["C:/Users/Anish/Documents/Projects/pathfinding/src/algorithms/dijkstra.js"],"names":["END_NODE_COL","END_NODE_ROW","dijkstra","grid","startNode","endNode","visitedNodes","distance","unvisitedNodes","getAllNodes","length","currentNode","getClosestNode","console","log","neighborList","getNeighbors","isWall","neighbor","previousNode","column","row","push","sort","A","B","node","shift","nodes"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,YAAvB,QAA2C,cAA3C;AACA,OAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,SAAxB,EAAmCC,OAAnC,EAA4C;AACjD,QAAMC,YAAY,GAAG,EAArB;AACAF,EAAAA,SAAS,CAACG,QAAV,GAAqB,CAArB;AACA,QAAMC,cAAc,GAAGC,WAAW,CAACN,IAAD,CAAlC;;AACA,SAAOK,cAAc,CAACE,MAAf,GAAwB,CAA/B,EAAkC;AAChC;AACA,UAAMC,WAAW,GAAGC,cAAc,CAACJ,cAAD,CAAlC;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AACA,UAAMI,YAAY,GAAGC,YAAY,CAACL,WAAD,EAAcR,IAAd,CAAjC;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYC,YAAZ;AACA,QAAIJ,WAAW,CAACM,MAAhB,EAAwB;;AACxB,SAAK,MAAMC,QAAX,IAAuBH,YAAvB,EAAqC;AACnCG,MAAAA,QAAQ,CAACX,QAAT,GAAoBI,WAAW,CAACJ,QAAZ,GAAuB,CAA3C;AACAW,MAAAA,QAAQ,CAACC,YAAT,GAAwBR,WAAxB;AACD;AACF;AACF;;AAED,SAASK,YAAT,CAAsBL,WAAtB,EAAmCR,IAAnC,EAAyC;AACvC,QAAMY,YAAY,GAAG,EAArB;AADuC,QAE/BK,MAF+B,GAEfT,WAFe,CAE/BS,MAF+B;AAAA,QAEvBC,GAFuB,GAEfV,WAFe,CAEvBU,GAFuB;AAGvC,MAAID,MAAM,GAAG,CAAb,EAAgBL,YAAY,CAACO,IAAb,CAAkBnB,IAAI,CAACiB,MAAM,GAAG,CAAV,CAAJ,CAAiBC,GAAjB,CAAlB;AAChB,MAAID,MAAM,GAAGpB,YAAb,EAA2Be,YAAY,CAACO,IAAb,CAAkBnB,IAAI,CAACiB,MAAM,GAAG,CAAV,CAAJ,CAAiBC,GAAjB,CAAlB;AAC3B,MAAIA,GAAG,GAAG,CAAV,EAAaN,YAAY,CAACO,IAAb,CAAkBnB,IAAI,CAACiB,MAAD,CAAJ,CAAaC,GAAG,GAAG,CAAnB,CAAlB;AACb,MAAIA,GAAG,GAAGpB,YAAV,EAAwBc,YAAY,CAACO,IAAb,CAAkBnB,IAAI,CAACiB,MAAD,CAAJ,CAAaC,GAAG,GAAG,CAAnB,CAAlB;AACxB,SAAON,YAAP;AACD;;AAED,SAASH,cAAT,CAAwBJ,cAAxB,EAAwC;AACtC;AACAA,EAAAA,cAAc,CAACe,IAAf,CAAoB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACjB,QAAF,GAAakB,CAAC,CAAClB,QAA7C,EAFsC,CAGtC;;AACA,QAAMmB,IAAI,GAAGlB,cAAc,CAACmB,KAAf,EAAb;AACA,SAAOD,IAAP;AACD;;AACD,SAASjB,WAAT,CAAqBN,IAArB,EAA2B;AACzB,QAAMyB,KAAK,GAAG,EAAd;;AACA,OAAK,MAAMR,MAAX,IAAqBjB,IAArB,EAA2B;AACzB,SAAK,MAAMuB,IAAX,IAAmBN,MAAnB,EAA2B;AACzBQ,MAAAA,KAAK,CAACN,IAAN,CAAWI,IAAX;AACD;AACF;;AACD,SAAOE,KAAP;AACD","sourcesContent":["import { END_NODE_COL, END_NODE_ROW } from \"../constants\";\r\nexport function dijkstra(grid, startNode, endNode) {\r\n  const visitedNodes = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (unvisitedNodes.length > 0) {\r\n    //   start at the start node and susequently get the closest neighbor\r\n    const currentNode = getClosestNode(unvisitedNodes);\r\n    console.log(currentNode);\r\n    const neighborList = getNeighbors(currentNode, grid);\r\n    console.log(neighborList);\r\n    if (currentNode.isWall) continue;\r\n    for (const neighbor of neighborList) {\r\n      neighbor.distance = currentNode.distance + 1;\r\n      neighbor.previousNode = currentNode;\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNeighbors(currentNode, grid) {\r\n  const neighborList = [];\r\n  const { column, row } = currentNode;\r\n  if (column > 0) neighborList.push(grid[column - 1][row]);\r\n  if (column < END_NODE_COL) neighborList.push(grid[column + 1][row]);\r\n  if (row > 0) neighborList.push(grid[column][row - 1]);\r\n  if (row < END_NODE_ROW) neighborList.push(grid[column][row + 1]);\r\n  return neighborList;\r\n}\r\n\r\nfunction getClosestNode(unvisitedNodes) {\r\n  //arrange in ascending order by distance\r\n  unvisitedNodes.sort((A, B) => A.distance - B.distance);\r\n  //remove closestNode from unvisited nodes\r\n  const node = unvisitedNodes.shift();\r\n  return node;\r\n}\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const column of grid) {\r\n    for (const node of column) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}