{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anish\\\\Documents\\\\Projects\\\\pathfinding\\\\src\\\\PathFinder\\\\PathFinder.js\";\nimport React, { Component } from \"react\";\nimport Node from \"./Node.js\";\nimport \"./PathFinder.css\";\nimport { dijkstra, getShortestPath } from \"../algorithms/dijkstra\";\nimport { START_NODE_COL, START_NODE_ROW, END_NODE_COL, END_NODE_ROW } from \"../constants\";\nconst freeze = true;\nconst initialState = {\n  grid: [],\n  startNodeCol: START_NODE_COL,\n  startNodeRow: START_NODE_ROW,\n  endNodeCol: END_NODE_COL,\n  endNodeRow: END_NODE_ROW\n};\n\nclass PathFinder extends Component {\n  constructor() {\n    super();\n\n    this.changeStartNode = node => {\n      this.setState({\n        startNodeCol: node.props.column,\n        startNodeRow: node.props.row\n      });\n      const grid = drawInitialGrid();\n      this.setState({\n        grid: grid\n      });\n    };\n\n    this.changeEndNode = node => {\n      this.setState({\n        endNodeCol: node.props.column,\n        endNodeRow: node.props.row\n      });\n      const grid = drawInitialGrid();\n      this.setState({\n        grid: grid\n      });\n    };\n\n    this.state = initialState;\n  }\n\n  componentDidMount() {\n    const grid = drawInitialGrid();\n    this.setState({\n      grid: grid\n    });\n  }\n\n  visualizeAlgorithm() {\n    const _this$state = this.state,\n          grid = _this$state.grid,\n          startNodeCol = _this$state.startNodeCol,\n          startNodeRow = _this$state.startNodeRow,\n          endNodeCol = _this$state.endNodeCol,\n          endNodeRow = _this$state.endNodeRow;\n    const startNode = grid[startNodeCol][startNodeRow];\n    const endNode = grid[endNodeCol][endNodeRow];\n    const visitedNodes = dijkstra(grid, startNode, endNode);\n    const shortestPath = getShortestPath(startNode, endNode);\n    this.removeCSS(visitedNodes, startNode, endNode);\n    this.animateAlgorithm(visitedNodes, startNode, endNode, shortestPath);\n  }\n\n  removeCSS() {\n    const grid = this.state.grid;\n    document.querySelector();\n  } //remove the CSS of the nodes after the first use of visualize button\n\n\n  removeCSS(visitedNodes, startNode, endNode) {\n    for (let i = 0; i < visitedNodes.length; i++) {\n      const node = visitedNodes[i];\n\n      if (node !== startNode && node !== endNode) {\n        document.getElementById(\"node-\".concat(node.column, \"-\").concat(node.row)).className = \"node\";\n      }\n    }\n  }\n\n  animateAlgorithm(visitedNodes, startNode, endNode, shortestPath) {\n    for (let i = 0; i < visitedNodes.length; i++) {\n      if (i === visitedNodes.length - 1) {\n        setTimeout(() => {\n          this.displayShortestPath(shortestPath, startNode, endNode);\n        }, 100 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodes[i];\n\n        if (node !== startNode && node !== endNode) {\n          document.getElementById(\"node-\".concat(node.column, \"-\").concat(node.row)).className = \"node-Visited\";\n        }\n      }, 100 * i);\n    }\n  }\n\n  displayShortestPath(shortestPath, startNode, endNode) {\n    for (let i = 0; i < shortestPath.length; i++) {\n      const node = shortestPath[i];\n\n      if (node !== startNode && node !== endNode) {\n        document.getElementById(\"node-\".concat(node.column, \"-\").concat(node.row)).className = \"node-Path\";\n      }\n    }\n  }\n\n  //reset the CSS animation after the first use\n  resetCSS() {\n    while (document.querySelector(\".node-Visited\") != null) {\n      document.querySelector(\".node-Visited\").className = \"node\";\n    }\n\n    while (document.querySelector(\".node-Path\") != null) {\n      document.querySelector(\".node-Path\").className = \"node\";\n    }\n  }\n\n  render() {\n    const grid = this.state.grid;\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"start\",\n      onClick: () => this.visualizeAlgorithm(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Visualize!\"), React.createElement(\"button\", {\n      id: \"reset\",\n      onClick: () => this.resetCSS(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Reset!\"), React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, grid.map((row, rowIndex) => {\n      return React.createElement(\"div\", {\n        key: rowIndex,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, row.map((coln, colnIndex) => {\n        const row = coln.row,\n              column = coln.column,\n              isStart = coln.isStart,\n              isFinish = coln.isFinish,\n              isWall = coln.isWall;\n        return React.createElement(Node, {\n          key: colnIndex,\n          row: row,\n          column: column,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          changeStartNode: this.changeStartNode,\n          changeEndNode: this.changeEndNode,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        });\n      }));\n    })));\n  }\n\n}\n\nconst drawInitialGrid = state => {\n  const grid = [];\n\n  for (let column = 0; column < 50; column++) {\n    let currentColumn = [];\n\n    for (let row = 0; row < 20; row++) {\n      currentColumn.push(createNewNode(row, column, state));\n    }\n\n    grid.push(currentColumn);\n  }\n\n  return grid;\n};\n\nconst createNewNode = (row, column) => {\n  const _state = state,\n        startNodeCol = _state.startNodeCol,\n        startNodeRow = _state.startNodeRow,\n        endNodeCol = _state.endNodeCol,\n        endNodeRow = _state.endNodeRow;\n  return {\n    column,\n    row,\n    distance: Infinity,\n    previousNode: null,\n    isVisited: false,\n    isWall: false,\n    isStart: column === startNodeCol && row === startNodeRow,\n    isFinish: column === endNodeCol && row === endNodeRow\n  };\n};\n\nexport default PathFinder;","map":{"version":3,"sources":["C:/Users/Anish/Documents/Projects/pathfinding/src/PathFinder/PathFinder.js"],"names":["React","Component","Node","dijkstra","getShortestPath","START_NODE_COL","START_NODE_ROW","END_NODE_COL","END_NODE_ROW","freeze","initialState","grid","startNodeCol","startNodeRow","endNodeCol","endNodeRow","PathFinder","constructor","changeStartNode","node","setState","props","column","row","drawInitialGrid","changeEndNode","state","componentDidMount","visualizeAlgorithm","startNode","endNode","visitedNodes","shortestPath","removeCSS","animateAlgorithm","document","querySelector","i","length","getElementById","className","setTimeout","displayShortestPath","resetCSS","render","map","rowIndex","coln","colnIndex","isStart","isFinish","isWall","currentColumn","push","createNewNode","distance","Infinity","previousNode","isVisited"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Node from \"./Node.js\";\r\nimport \"./PathFinder.css\";\r\nimport { dijkstra, getShortestPath } from \"../algorithms/dijkstra\";\r\nimport {\r\n  START_NODE_COL,\r\n  START_NODE_ROW,\r\n  END_NODE_COL,\r\n  END_NODE_ROW,\r\n} from \"../constants\";\r\n\r\nconst freeze = true;\r\nconst initialState = {\r\n  grid: [],\r\n  startNodeCol: START_NODE_COL,\r\n  startNodeRow: START_NODE_ROW,\r\n  endNodeCol: END_NODE_COL,\r\n  endNodeRow: END_NODE_ROW,\r\n};\r\nclass PathFinder extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = initialState;\r\n  }\r\n  componentDidMount() {\r\n    const grid = drawInitialGrid();\r\n    this.setState({ grid: grid });\r\n  }\r\n  visualizeAlgorithm() {\r\n    const {\r\n      grid,\r\n      startNodeCol,\r\n      startNodeRow,\r\n      endNodeCol,\r\n      endNodeRow,\r\n    } = this.state;\r\n    const startNode = grid[startNodeCol][startNodeRow];\r\n    const endNode = grid[endNodeCol][endNodeRow];\r\n    const visitedNodes = dijkstra(grid, startNode, endNode);\r\n    const shortestPath = getShortestPath(startNode, endNode);\r\n    this.removeCSS(visitedNodes, startNode, endNode);\r\n    this.animateAlgorithm(visitedNodes, startNode, endNode, shortestPath);\r\n  }\r\n\r\n  removeCSS() {\r\n    const grid = this.state.grid;\r\n    document.querySelector();\r\n  }\r\n\r\n  //remove the CSS of the nodes after the first use of visualize button\r\n  removeCSS(visitedNodes, startNode, endNode) {\r\n    for (let i = 0; i < visitedNodes.length; i++) {\r\n      const node = visitedNodes[i];\r\n      if (node !== startNode && node !== endNode) {\r\n        document.getElementById(`node-${node.column}-${node.row}`).className =\r\n          \"node\";\r\n      }\r\n    }\r\n  }\r\n  animateAlgorithm(visitedNodes, startNode, endNode, shortestPath) {\r\n    for (let i = 0; i < visitedNodes.length; i++) {\r\n      if (i === visitedNodes.length - 1) {\r\n        setTimeout(() => {\r\n          this.displayShortestPath(shortestPath, startNode, endNode);\r\n        }, 100 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodes[i];\r\n        if (node !== startNode && node !== endNode) {\r\n          document.getElementById(`node-${node.column}-${node.row}`).className =\r\n            \"node-Visited\";\r\n        }\r\n      }, 100 * i);\r\n    }\r\n  }\r\n  displayShortestPath(shortestPath, startNode, endNode) {\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n      const node = shortestPath[i];\r\n      if (node !== startNode && node !== endNode) {\r\n        document.getElementById(`node-${node.column}-${node.row}`).className =\r\n          \"node-Path\";\r\n      }\r\n    }\r\n  }\r\n  changeStartNode = (node) => {\r\n    this.setState({\r\n      startNodeCol: node.props.column,\r\n      startNodeRow: node.props.row,\r\n    });\r\n    const grid = drawInitialGrid();\r\n    this.setState({ grid: grid });\r\n  };\r\n  changeEndNode = (node) => {\r\n    this.setState({\r\n      endNodeCol: node.props.column,\r\n      endNodeRow: node.props.row,\r\n    });\r\n    const grid = drawInitialGrid();\r\n    this.setState({ grid: grid });\r\n  };\r\n\r\n  //reset the CSS animation after the first use\r\n  resetCSS() {\r\n    while (document.querySelector(`.node-Visited`) != null) {\r\n      document.querySelector(`.node-Visited`).className = \"node\";\r\n    }\r\n    while (document.querySelector(`.node-Path`) != null) {\r\n      document.querySelector(`.node-Path`).className = \"node\";\r\n    }\r\n  }\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <button id=\"start\" onClick={() => this.visualizeAlgorithm()}>\r\n          Visualize!\r\n        </button>\r\n        <button id=\"reset\" onClick={() => this.resetCSS()}>\r\n          Reset!\r\n        </button>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIndex) => {\r\n            return (\r\n              <div key={rowIndex}>\r\n                {row.map((coln, colnIndex) => {\r\n                  const { row, column, isStart, isFinish, isWall } = coln;\r\n                  return (\r\n                    <Node\r\n                      key={colnIndex}\r\n                      row={row}\r\n                      column={column}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      changeStartNode={this.changeStartNode}\r\n                      changeEndNode={this.changeEndNode}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst drawInitialGrid = (state) => {\r\n  const grid = [];\r\n  for (let column = 0; column < 50; column++) {\r\n    let currentColumn = [];\r\n    for (let row = 0; row < 20; row++) {\r\n      currentColumn.push(createNewNode(row, column, state));\r\n    }\r\n    grid.push(currentColumn);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNewNode = (row, column) => {\r\n  const { startNodeCol, startNodeRow, endNodeCol, endNodeRow } = state;\r\n  return {\r\n    column,\r\n    row,\r\n    distance: Infinity,\r\n    previousNode: null,\r\n    isVisited: false,\r\n    isWall: false,\r\n    isStart: column === startNodeCol && row === startNodeRow,\r\n    isFinish: column === endNodeCol && row === endNodeRow,\r\n  };\r\n};\r\n\r\nexport default PathFinder;\r\n"]},"metadata":{},"sourceType":"module"}